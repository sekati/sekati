/** * sekati.tests.KeyManagerTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.log.Logger;	import sekati.managers.KeyManager;	import sekati.ui.Keyboard;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;		/**	 * KeyManagerTest	 */	public class KeyManagerTest extends AbstractTestApplication {		public var tf : TextField;		public static const KEYS : String = "Available Hotkeys: A / UP+M / DOWN+P\n";		/**		 * KeyManagerTest Constructor		 */		public function KeyManagerTest() {			super( );		}		/**		 * @inheritDoc		 */		override protected function initEntryPoint() : void {			super.initEntryPoint( );						runKeyboardTests( );						tf = new TextField( );			tf.x = 5;			tf.y = 50;			tf.autoSize = TextFieldAutoSize.LEFT;			tf.multiline = true;			tf.text = KEYS;			addChild( tf );						KeyManager.$.addKeyListener( test0, true, Keyboard.A );			KeyManager.$.addKeyListener( test1, false, Keyboard.UP, Keyboard.M );			KeyManager.$.addKeyListener( test2, false, Keyboard.DOWN, Keyboard.P );			/*			var a : Array = [ 5,4,3,2,1,'C','B','A' ];			var b : Array = [ 'A','B','C',1,2,3,4,5 ];			Logger.$.trace( this, "arrays compare: " + ArrayUtil.compare( a, b ) );			Logger.$.trace( this, "arrays compare: " + ArrayUtil.compare( a, b, true ) );			*/		}		private function runKeyboardTests() : void {			Logger.$.trace( this, "a: " + Keyboard.A );			Logger.$.trace( this, "up: " + Keyboard['UP'] );			Logger.$.trace( this, "capsLock: " + Keyboard.capsLock );			Logger.$.trace( this, "numLock: " + Keyboard.numLock );			Logger.$.trace( this, "isAccessible: " + Keyboard.isAccessible );		}		public function test0() : void {			var str : String = "test0 works.";			Logger.$.warn( this, str );			tf.appendText( "\n" + str );		}		public function test1() : void {			var str : String = "test1 works.";			Logger.$.warn( this, str );			tf.appendText( "\n" + str );		}		public function test2() : void {			var str : String = "test2 works.";			Logger.$.warn( this, str );			tf.appendText( "\n" + str );		}			}}