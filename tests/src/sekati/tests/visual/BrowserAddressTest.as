/** * BrowserAddressTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.draw.Rect;	import sekati.external.BrowserAddress;	import sekati.ui.TextButton;		import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;			/**	 * BrowserAddressTest	 */	public class BrowserAddressTest extends AbstractTestApplication {		public var btn0 : TextButton;		public var btn1 : TextButton;		public var btn2 : TextButton;		public var btn3 : TextButton;		public var btn4 : TextButton;				public var tf : TextField;		public function BrowserAddressTest() {			super( );		}		/**		 * @inheritDoc		 */		override protected function initEntryPoint() : void {			super.initEntryPoint( );			configUI( );		}		/**		 * Configure UI elements.		 */		private function configUI() : void {			tf = new TextField( );			tf.autoSize = TextFieldAutoSize.LEFT;			tf.multiline = true;			tf.text = "BrowserAddress Test Initializing ...";			tf.y = 100;						btn0 = new TextButton( "Foo", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn0.y = 200;			btn0.addEventListener( MouseEvent.CLICK, fooClickHandler );						btn1 = new TextButton( "Bar", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn1.x = 125;			btn1.y = 200;			btn1.addEventListener( MouseEvent.CLICK, barClickHandler );						btn2 = new TextButton( "Back()", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn2.x = 250;			btn2.y = 200;			btn2.addEventListener( MouseEvent.CLICK, backClickHandler );							btn3 = new TextButton( "Forward()", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn3.x = 375;			btn3.y = 200;			btn3.addEventListener( MouseEvent.CLICK, forwardClickHandler );								btn4 = new TextButton( "Go(1)", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn4.x = 500;			btn4.y = 200;			btn4.addEventListener( MouseEvent.CLICK, goClickHandler );															addChildren( tf, btn0, btn1, btn2, btn3, btn4 );		}		private function goClickHandler(e : MouseEvent) : void {			tf.text = "Go (delta 1)";			BrowserAddress.go( 1 );		}		private function forwardClickHandler(e : MouseEvent) : void {			tf.text = "Advancing History";			BrowserAddress.forward( );					}		private function backClickHandler(e : MouseEvent) : void {			tf.text = "Decreasing History";			BrowserAddress.back( );				}		private function fooClickHandler(e : MouseEvent = null) : void {			var oldAnchor : String = BrowserAddress.anchor;			BrowserAddress.anchor = "FOO";			tf.text = "Rewriting anchor tag: " + BrowserAddress.anchor + " from: " + oldAnchor;		}		private function barClickHandler(e : MouseEvent = null) : void {			var oldAnchor : String = BrowserAddress.anchor;			BrowserAddress.anchor = "BAR";			tf.text = "Rewriting anchor tag: " + BrowserAddress.anchor + " from: " + oldAnchor;				}	}}