/** * sekati.tests.visual.GroupCollisionDetectorTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.collisions.AbstractCollisionDetector;	import sekati.collisions.Collision;	import sekati.collisions.CollisionAngle;	import sekati.collisions.GroupCollisionDetector;	import sekati.display.Canvas;	import sekati.display.DraggableSprite;	import sekati.events.CollisionEvent;	import sekati.tests.visual.AbstractTestApplication;		import flash.display.Sprite;	import flash.geom.Rectangle;	import flash.text.TextField;		/**	 * GroupCollisionDetectorTest	 */	public class GroupCollisionDetectorTest extends AbstractTestApplication {		public var detector : GroupCollisionDetector;		public var messageBox : TextField;		public function GroupCollisionDetectorTest() {			super( );		}		override protected function initEntryPoint() : void {			messageBox = new TextField( );			messageBox.autoSize = "center";			messageBox.width = Canvas.stage.stageWidth;			addChild( messageBox );								detector = new GroupCollisionDetector( );			detector.alphaThreshold = 0.5;			detector.returnAngleType = CollisionAngle.DEGREE;						for(var i : uint = 0; i < 4 ; i++) {				var circle : DraggableSprite = new DraggableSprite( new Rectangle( 0, 0, Canvas.stage.stageWidth, Canvas.stage.stageHeight ), true, 0.9, 2 );				circle.name = "circle " + i;				addChild( circle );				circle.graphics.beginFill( 0x00FFFF );				circle.graphics.drawCircle( 0, 0, 20 );				circle.graphics.endFill( );								circle.graphics.beginFill( 0x00FFFF, 0.25 );				circle.graphics.drawCircle( 0, 0, 50 );				circle.graphics.endFill( );									circle.x = 40;				circle.y = stage.stageHeight / 4 * i + 40;					detector.addItem( circle );			}						detector.addEventListener( CollisionEvent.COLLISION, collisionHandler );			detector.startMonitor( );		}		private function collisionHandler(e : CollisionEvent) : void {			for (var i : int = 0; i < e.collisions.length ; i++) {				var collision : Collision = e.collisions[i] as Collision;				messageBox.appendText( "Collision detected on " + collision.object1.name + " & " + collision.object2.name + ", angle: " + collision.angle + ", overlap: " + collision.overlap + "\n" );				messageBox.scrollV = messageBox.maxScrollV;			}		}	}}