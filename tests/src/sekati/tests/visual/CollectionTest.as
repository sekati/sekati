/** * CollectionTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.collections.*;	import sekati.log.Inspector;	import sekati.log.Logger;	import flash.display.*;			/**	 * CollectionTest	 */	public class CollectionTest extends AbstractTestApplication {		/**		 * Test Operational Array		 */		protected var fruit : Array = new Array( "apples", "oranges", "bannanas", "cranberries", "pineapple", "grapefruit", "coconut" );		protected var digit : Array = new Array( 6, 4, 3, 1, 2, 5, 9, 7, 8, 0 );		protected var order : Array = new Array( "ONE", "two", "three", "four", "five", "six", "seven", "eight", "nine", "TEN" );		/**		 * Constructor		 */		public function CollectionTest() {			super( );		}		/**		 * @inheritDoc		 */		override protected function initEntryPoint() : void {			//inspectorTest( );			//displayListTest( );			//trace("testint "+int(-1));			bidirectionalTest( );			bounceTest( );			loopTest( );		}		protected function inspectorTest() : void {			Logger.$.trace( this, "-----" );			//var a0 : ArrayCollection = new ArrayCollection( fruit );			Logger.$.trace( this, "Inspector:\n" + new Inspector( fruit ) );			Logger.$.trace( this, "Inspector:\n" + new Inspector( digit ) );									var obj : Object = {foo:13, bar:"hello", taco:new Sprite( ), arr:[ 1,2,3,4,5 ], o:{a:'apple', b:'bannana'}, doe:7};			Logger.$.trace( this, "Inspector:\n" + new Inspector( obj ) );					}		protected function displayListTest() : void {			Logger.$.trace( this, "-----" );			var rootContainer : Sprite = new Sprite( );			rootContainer.name = "rootContainer";			addChild( rootContainer );			for (var i : int = 0; i < 20 ; i++) {				var _child : Sprite = new Sprite( );				_child.name = "child_" + i;				rootContainer.addChild( _child );			}			// TESTS			var d0 : DisplayListCollection = new DisplayListCollection( rootContainer );			Logger.$.trace( this, String( d0.count ) );					}		protected function bounceTest() : void {			Logger.$.trace( this, "-----" );			var bounceIt : ArrayBounceIterator = new ArrayBounceIterator( order, true );			for (var i : int = 0; i < 20 ; i++) {				Logger.$.trace( this, "- " + i + " ArrayBounceIterator: (hasNext: " + bounceIt.hasNext( ) + ") " + bounceIt.next( ) );			}		}		protected function bidirectionalTest() : void {			Logger.$.trace( this, "-----" );			var directIt : ArrayBidirectionalIterator = new ArrayBidirectionalIterator( order );			//directIt.pointer = 0;			for (var i : int = 0; i < 15 ; i++) {				Logger.$.trace( this, "@ " + i + " ArrayBidirectionalIterator: (hasNext: " + directIt.hasNext( ) + ") " + directIt.next( ) );			}			Logger.$.trace( this, "-----" );			directIt.pointer = directIt.length - 1;						for (var j : int = 0; j < 15 ; j++) {				Logger.$.trace( this, "# " + j + " ArrayBidirectionalIterator: (hasPrevious: " + directIt.hasPrevious( ) + ") " + directIt.previous( ) );			}		}				protected function loopTest() : void {			Logger.$.trace( this, "-----" );			var loopIt : ArrayLoopableIterator = new ArrayLoopableIterator( order );			//loopIt.pointer = 0;			for (var i : int = 0; i < 30 ; i++) {				Logger.$.trace( this, "* " + i + " ArrayLoopableIterator: (hasNext: " + loopIt.hasNext( ) + ") " + loopIt.next( ) );			}		}			}}