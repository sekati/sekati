/** * sekati.tests.visual.ArrayUtilTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.utils.ArrayUtil;		import sekati.tests.visual.AbstractTestApplication;	/**	 * ArrayUtilTest	 */	public class ArrayUtilTest extends AbstractTestApplication {		public static var testArray : Array = [ 1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31 ];		public function ArrayUtilTest() {			super( );		}		/**		 * Locate and return the (lowest) nearest neighbor or matching value in a <code>NUMERIC</code> sorted array of Numbers.		 * @param val 				the value to find match or find nearst match of.		 * @param range 			of values in array.		 * @param returnIndex 		if <code>true</code> return the array index of the neighbor, if <code>false</code> return the value of the neighbor.		 * @example <listing version="3.0">		 * var a : Array = [1, 3, 5, 7, 9, 11];		 * var nearestLow : Number = ArrayUtil.nearestNeighbor(4, a); 			// returns 3 (value)		 * var nearestHigh : Number = ArrayUtil.nearestNeighbor(4, a, true); 	// returns 1 (index) 		 * </listing>		 */		public static function nearestNeighbor(val : Number, range : Array, returnIndex : Boolean = false) : Number {			var nearest : Number = range[0];			var index : uint = 0;			for (var i : int = 1; i < range.length ; i++) {				if (Math.abs( range[i] - val ) < Math.abs( nearest - val )) {					nearest = range[i];					index = i;				}			}			return (!returnIndex) ? nearest : index;		}		public function nearest(val : Number, range : Array, returnIndex : Boolean = true) : Number {			range.sort( Array.NUMERIC );			trace( "sorted range: " + range );			var nearest : Number = range[0];			var index : int = 0;			for (var i : int = 1; i < range.length ; i++) {				if (Math.abs( range[i] - val ) < Math.abs( nearest - val )) {					nearest = range[i];					index = i;				}							}			return (!returnIndex) ? nearest : index;		}		override protected function initEntryPoint() : void {			super.initEntryPoint( );			ArrayUtil.shuffle( testArray );			trace( "default: " + testArray );			var nearestNeighborIndex : int = nearest( 5, testArray );			trace( "nearest: " + testArray[nearestNeighborIndex] );		}	}}