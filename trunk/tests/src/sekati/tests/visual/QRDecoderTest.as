/** * sekati.tests.visual.QRDecoderTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.log.Logger;		import sekati.display.CoreBitmapData;	import sekati.display.InteractiveSprite;	import sekati.formats.qrcode.DecodeResult;	import sekati.formats.qrcode.QRDecoder;	import sekati.media.CameraDevice;	import sekati.tests.visual.AbstractTestApplication;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.utils.setTimeout;			/**	 * QRDecoderTest	 */	public class QRDecoderTest extends AbstractTestApplication {		private static const CAPTION : String = "Press Button when ready to process QRCode snapshot ...";		private static const RESULT_CAPTION : String = "CoreBitmapData snapshots for result.";		public var cam : CameraDevice;		public var bmp : Bitmap;		public var bmpd : CoreBitmapData;		public var bmpDebug : Bitmap;		public var bmpdDebug : CoreBitmapData;				public var tf : TextField;		public var result : TextField;		public var btn : InteractiveSprite;		public function QRDecoderTest() {			super( );		}		override protected function initEntryPoint() : void {			//super.initEntryPoint( );			cam = new CameraDevice( );			// button			btn = new InteractiveSprite( );			btn.graphics.beginFill( 0xff00ff, 1 );			btn.graphics.drawRect( 0, 0, 50, 50 );			btn.graphics.endFill( );			btn.y = 275;						// result			result = new TextField( );			result.autoSize = TextFieldAutoSize.LEFT;			result.multiline = true;			result.y = 250;			result.x = 400;			result.text = RESULT_CAPTION;						// textfield.			tf = new TextField( );			tf.autoSize = TextFieldAutoSize.LEFT;			tf.text = CAPTION;			tf.y = 250;						// cam bmp			bmp = new Bitmap( new BitmapData( 320, 240, false, 0 ) );			bmp.x = 400;						// debug bmp			bmpDebug = new Bitmap( new BitmapData( 320, 240, false, 0 ) );			bmpDebug.x = 800;						// add listeners/children			btn.addEventListener( MouseEvent.CLICK, snapshot );			addChildren( cam, tf, result, btn, bmp, bmpDebug );		}		/**		 * Create the snapshot and run the QRCode against it.		 */		private function snapshot(e : MouseEvent) : void {			bmpd = new CoreBitmapData( cam );			bmpdDebug = new CoreBitmapData( cam );			bmp.bitmapData = bmpd;			bmpDebug.bitmapData = bmpdDebug;			result.text = "Processing Result ...";			setTimeout( processBitmap, 100 );		}		private function processBitmap() : void {			var decode : DecodeResult = QRDecoder.decode( bmpd, bmpdDebug );			result.text = "Version: " + decode.version;			result.appendText( "\nErrorCorrectionLevel: " + decode.errorCorrectionLevel );			result.appendText( "\nResult: " + decode.text );			Logger.$.object( decode );		}	}}