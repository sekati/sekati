/** * BrowserManagerTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.draw.Rect;	import sekati.events.BrowserEvent;	import sekati.external.BrowserAddress;	import sekati.managers.BrowserManager;	import sekati.ui.TextButton;	import flash.events.MouseEvent;	import flash.text.TextField;		/**	 * BrowserManagerTest	 */	public class BrowserManagerTest extends AbstractTestApplication {		public var btn0 : TextButton;		public var btn1 : TextButton;		public var btn2 : TextButton;		public var btn3 : TextButton;		public var btn4 : TextButton;			public var btn5 : TextButton;		public var btn6 : TextButton;		public var btn7 : TextButton;			public var btn8 : TextButton;		public var btn9 : TextButton;						public var tf : TextField;		public function BrowserManagerTest() {			super( );		}		/**		 * @inheritDoc		 */		override protected function initEntryPoint() : void {			super.initEntryPoint( );			configUI( );		}		/**		 * Configure UI elements.		 */		private function configUI() : void {			tf = new TextField( );			tf.width = 500;			tf.height = 150;			tf.y = 40;			tf.multiline = true;			tf.border = true;			tf.text = "BrowserManager Test Initializing ...\n";						// 0			btn0 = new TextButton( "Foo \n[Managed]", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn0.y = 200;			btn0.addEventListener( MouseEvent.CLICK, fooManagedClickHandler );						// 1			btn1 = new TextButton( "Bar \n[Managed]", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn1.x = 125;			btn1.y = 200;			btn1.addEventListener( MouseEvent.CLICK, barManagedClickHandler );						// 2			btn2 = new TextButton( "Foo \n[Unmanaged]", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn2.x = 250;			btn2.y = 200;			btn2.addEventListener( MouseEvent.CLICK, fooUnmanagedClickHandler );							// 3			btn3 = new TextButton( "Bar \n[Unmanaged]", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn3.x = 375;			btn3.y = 200;			btn3.addEventListener( MouseEvent.CLICK, barUnmanagedClickHandler );											// 4			btn4 = new TextButton( "push( doe ) \n[Managed]", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn4.x = 500;			btn4.y = 200;			btn4.addEventListener( MouseEvent.CLICK, pushManagedClickHandler );															// 5			btn5 = new TextButton( "pop( ) \n[Managed]", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn5.y = 300;			btn5.addEventListener( MouseEvent.CLICK, popManagedClickHandler );						// 6			btn6 = new TextButton( "Back \n[Managed]", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn6.x = 125;			btn6.y = 300;			btn6.addEventListener( MouseEvent.CLICK, backManagedClickHandler );						// 7			btn7 = new TextButton( "Forward \n[Managed]", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn7.x = 250;			btn7.y = 300;			btn7.addEventListener( MouseEvent.CLICK, forwardManagedClickHandler );							// 8			btn8 = new TextButton( "go( 2 ) \n[Managed]", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn8.x = 375;			btn8.y = 300;			//btn8.addEventListener( MouseEvent.CLICK, goManagedClickHandler );											// 9			btn9 = new TextButton( "Address Array", new Rect( 100, 50, 0, 0, 0, 0xCCCCCC ) );			btn9.x = 500;			btn9.y = 300;			btn9.addEventListener( MouseEvent.CLICK, arrayClickHandler );													addChildren( tf, btn0, btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9 );						BrowserManager.$.addEventListener( BrowserEvent.ADDRESS_CHANGE, addressChange );		}		/**		 * Handle address changes ...		 */		private function addressChange(e : BrowserEvent) : void {			tf.appendText( "\nAddress Change Detected: " + e.path + ", was: " + e.previousPath );			tf.scrollV = tf.maxScrollV;		}		// MANAGED 		private function fooManagedClickHandler(e : MouseEvent = null) : void {			BrowserManager.$.anchor = "FOO";		}		private function barManagedClickHandler(e : MouseEvent = null) : void {			BrowserManager.$.anchor = "BAR";		}		// UNMANAGED		private function fooUnmanagedClickHandler(e : MouseEvent = null) : void {			BrowserAddress.anchor = "FOO";		}		private function barUnmanagedClickHandler(e : MouseEvent = null) : void {			BrowserAddress.anchor = "BAR";		}		// PUSH POP		private function pushManagedClickHandler(e : MouseEvent) : void {			BrowserManager.$.push( "DOE" );		}		private function popManagedClickHandler(e : MouseEvent) : void {					BrowserManager.$.pop( );		}		private function forwardManagedClickHandler(e : MouseEvent) : void {			BrowserManager.$.back( );				}			private function backManagedClickHandler(e : MouseEvent) : void {			BrowserManager.$.back( );				}		private function arrayClickHandler(e : MouseEvent) : void {			tf.appendText( "\nAddress path array: " + BrowserManager.$.anchorArray + "\n" );		}	}}