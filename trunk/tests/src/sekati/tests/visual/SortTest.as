/** * sekati.tests.visual.SortTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.draw.Rect;	import sekati.display.Canvas;	import sekati.layout.Sort;	import sekati.tests.visual.AbstractTestApplication;	import sekati.utils.ColorUtil;	import flash.geom.Point;	import flash.utils.setTimeout;		/**	 * SortTest	 */	public class SortTest extends AbstractTestApplication {		public var itemArr : Array;		public var allSorts : Array;		public var runCount : int = 0;		public var itemNum : int = 50;				/**		 * SortTest Constructor		 */		public function SortTest() {			super( );		}		/**		 * @inheritDoc		 */		override protected function initEntryPoint() : void {			super.initEntryPoint( );			itemArr = new Array( );			for (var i : int = 0; i < itemNum ; i++) {				var r : Rect = new Rect( 10, 10, 0, 0, 0, ColorUtil.randomColor( ), 0.25 );				itemArr.push( r );				addChild( r );			}			//setTimeout( buildSorts, 2000 );			buildSorts( );		}		private function buildSorts() : void {			trace( "building sorts" );			var center : Point = new Point( Canvas.stage.stageWidth / 2, Canvas.stage.stageHeight / 2 );			var gridPos : Array = new Sort( itemArr ).grid( new Point( 350, 250 ), 7, 1 );			var circPos : Array = new Sort( itemArr ).circle( center, 100 );			var sinePos : Array = new Sort( itemArr ).sine( 1.5, Canvas.stage.stageWidth, Canvas.stage.stageHeight / 2, 0.5, 0.5 );			var triPos : Array = new Sort( itemArr ).triangle( center, 200 );			var flowerPos : Array = new Sort( itemArr ).flower( center, 100 );			var starPos0 : Array = new Sort( itemArr ).star( center, 5, 0.4, 180 );			var starPos1 : Array = new Sort( itemArr ).star( center, 7, 0.4, 180 );			var starPos2 : Array = new Sort( itemArr ).star( center, 9, 0.4, 180 );			var starPos3 : Array = new Sort( itemArr ).star( center, 12, 0.4, 180 );			var octPos : Array = new Sort( itemArr ).hedron( center, 8, 0.5, 90 );			var squarePos : Array = new Sort( itemArr ).square( center, 0.5 );			var hexPos : Array = new Sort( itemArr ).hexagon( center, 0.5 );			var unPos : Array = new Sort( itemArr ).unsort( new Point( 100, 100 ), new Point( 700, 700 ) );			allSorts = [ gridPos, circPos, sinePos, triPos, flowerPos, starPos0, starPos1, starPos2, starPos3, squarePos, octPos, hexPos, unPos ];			runSort( );		}		private function runSort() : void {			if (runCount < allSorts.length) {				reposition( allSorts[runCount] );				runCount++;			} else {				runCount = 0;				runSort( );			}		}		private function reposition(posArr : Array) : void {			trace( "repositioning" );			for (var i : int = 0; i < posArr.length ; i++) {				itemArr[i].x = posArr[i].x;				itemArr[i].y = posArr[i].y;							}			setTimeout( runSort, 2000 );		}		}}