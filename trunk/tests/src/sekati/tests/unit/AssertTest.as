/** * sekati.tests.unit.AssertTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.unit {	import sekati.tests.unit.APITestCase;		import flash.display.Sprite;	import flash.events.Event;			/**	 * AssertTest provides example implementations of assert statement usages.	 */	public class AssertTest extends APITestCase {		/**		 * AssertTest Constructor - The TestCase constructor. If you provide a contstructor in a TestCase subclass, you should ensure that this constructor is called.		 * @param methodName name of the test method to be called in the test run. 		 */		public function AssertTest(methodName : String = null) {			super( methodName );		}		/**		 * assertTrue - Asserts that a condition is true The first argument can be the message when the assertion fails		 * assertFalse - Asserts that a condition is false The first argument can be the message when the assertion fails 		 */		public function testBooleanAsserts() : void {			assertTrue( "assert true: 13.5 is Number", 13.5 is Number );			assertFalse( "false is false", false );		}			/**		 * assertEquals - Asserts that 2 values are equal. The first argument can be the message when the assertion fails 		 * assertStrictlyEquals - Asserts that two objects are strickly identical The first argument can be the message when the assertion fails  		 */		public function testEqualAsserts() : void {			assertEquals( "1 equals 1", 1, 1 );			assertStrictlyEquals( "0 strictly equals 0", 0, 0 );		}			/**		 * assertNull - Asserts that an object is null The first argument can be the message when the assertion fails 		 * assertNotNull - Asserts that an object is not null The first argument can be the message when the assertion fails 		 */		public function testNullAsserts() : void {			assertNull( "null is null", null );			assertNotNull( "'foo' is not null", "foo" );		}					/**		 * assertUndefined - Asserts that an object is undefined The first argument can be the message when the assertion fails  		 * assertNotUndefined - Asserts that an object is not undefined The first argument can be the message when the assertion fails 		 */		public function testUndefinedAsserts() : void {			assertUndefined( "undefined is undefined", undefined );			assertNotUndefined( "'foo' is not undefined", 'foo' );		}							/**		 * assertContained - Asserts that the first string is contained in the second one The first argument can be the message when the assertion fails 		 * assertNotContained - Asserts that the first string is not contained in the second one The first argument can be the message when the assertion fails 		 */		public function testContainAsserts() : void {			assertContained( "'catfood' contains 'cat'", "cat", "catfood" );			assertNotContained( "'catfood' does not contain 'dog'", "dog", "catfood" );		}					/**		 * assertMatch - Asserts that a string matches a regexp. The first argument can be the message when the assertion fails 		 * @param rest [ message = "", regexp, stringToTest ]		 * assertNoMatch - Asserts that a string doesn't match a regexp. The first argument can be the message when the assertion fails 		 * @param rest [ message = "", regexp, stringToTest ]		 */		public function testMatchAsserts() : void {			var theExp : RegExp = /^The/;			assertMatch( "Sentence matches Regexp: starts with 'The'", theExp, 'The RegExp language is difficult to learn.' );			assertNoMatch( "Sentence does not matches Regexp: starts with 'The'", theExp, 'RegExp is a bitch.' );		}		/**		 * addAsync - Add an asynchronous check point to the test. This method will return an event handler function. 		 * @param func 				the Function to execute when things have been handled		 * @param timeout 			if the function isn't called within this time the test is considered a failure		 * @param passThroughData 	data that will be passed to your function (only if non-null) as the 2nd argument		 * @param failFunc 			a Function that will be called if the asynchronous function fails to execute, useful if perhaps the failure to execute was intentional or if you want a specific failure message 		 * @return 					the Function that can be used as an event listener		 */		public function testAsync() : void {			//addAsync(func, timeout)			var s : Sprite = new Sprite( );			var eventHandler : Function = function(e : Event):void {				assertTrue( "e.target is Sprite", (e.target is Sprite) );				s.removeEventListener( Event.INIT, eventHandler );				s = null;			};			s.addEventListener( Event.INIT, addAsync( eventHandler, 1000 ) );			s.dispatchEvent( new Event( Event.INIT ) );		}	}}