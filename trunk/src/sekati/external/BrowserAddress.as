/** * sekati.external.BrowserAddress * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.external {	import flash.external.ExternalInterface;	import sekati.log.Logger;		/**	 * BrowserAddress provides basic deeplinking through URL anchor getters and setters.	 * 	 * <p>While not as powerful or full-featured as <code>SWFAddress</code> it is far easier	 * to implement and support as there is no need to write back/forward code-jumps from all points in the	 * site but only during initialization. The model:<ol>	 * <li>Check for anchor links during App initialization & respond with jump code when appropriate.</li>	 * <li>Set links as the user drills down to key points in the site or application experience</li>	 * </ol></p> 	 */	public class BrowserAddress {		protected static var baseURL : String = ExternalInterface.call( "function( ) { document.location.href.split('#')[0]; }" );		protected static var baseTitle : String = ExternalInterface.call( "function( ) { document.title; }" );		/*		private static function get baseURL() : String {		if(ExternalInterface.available && FlashValidator.isBrowser) {		return ExternalInterface.call( "function( ) { document.location.href.split('#')[0]; }" );		} else {		throw new Error( "You Twat! the page isnt even loaded yet: darrrrr " );			}		}		 * 		 */		/**		 * Returns value of the _anchor		 */		public static function get anchor() : String {			var js : String = "function( ) { return document.location.href.split( '#' )[1]; }";			return ExternalInterface.call( js );		}		/**		 * @private		 */		public static function set anchor(val : String) : void {						Logger.$.info( BrowserAddress, "* BrowserAddress.anchor => '" + val + "'" );						var base : String = ExternalInterface.call( "function( ) { document.location.href.split('#')[0]; }" );			var js : String = "function( ) { document.location.href = '" + base + "/#/" + val + "'; }";						var jsTest : String = "function( ) { document.location.href = document.location.href.split('#')[0] + '/#/" + val + "'; }";								Logger.$.warn( BrowserAddress, "WHATUP Yo: " + js + " || " + jsTest );			ExternalInterface.call( jsTest );		}		/**		 * Returns value of property		 */		public static function get title() : String {			var js : String = "function( ) { return document.title; }";			return ExternalInterface.call( js );		}		/**		 * @private		 */		public static function set title(val : String) : void {			var js : String = "function( ) { document.title = " + val + "; }";			ExternalInterface.call( js );		}		/**		 * Return the full Browser URL		 */		public static function get href() : String {			var js : String = "function( ) { return document.location.href; }";			return ExternalInterface.call( js );		}		/**		 * BrowserAddress Static Constructor		 */		public function BrowserAddress() {			throw new Error( "BrowserAddress is a static class and cannot be instantiated." );		}	}}