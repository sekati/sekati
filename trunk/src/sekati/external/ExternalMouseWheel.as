/** * sekati.external.ExternalMouseWheel * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.external {	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.utils.Timer;	import sekati.events.ExternalMouseEvent;	import sekati.validate.OSValidation;		/**	 * ExternalMouseWheel adds mouse wheel support for Mac clients:	 * This is accomplished via capturing the mouseWheel event in 	 * javascript with <code>ExternalInterface<code> and dispatching 	 * an <code>ExternalMouseWheelEvent<code>. These events will only	 * be dispatched if the client is a Mac.	 */	public class ExternalMouseWheel extends EventDispatcher {		private static var _instance : ExternalMouseWheel;		private static var _isMac : Boolean = OSValidation.isMac( );				/**		 * ExternalMouseWheel Constructor		 */		public function ExternalMouseWheel(s : SingletonEnforcer) {			if (!s) {				throw new Error( "ExternalMouseWheel is a Singleton and may only be accessed via its accessor methods" ); 				}			if (!_isMac) {				throw new Error( "ExternalMouseWheel is not needed for non-mac clients." );				}			init( );		}		/**		 * Singleton Accessor		 * @return ExternalMouseWheel		 */				public static function getInstance() : ExternalMouseWheel {			if(!_instance) _instance = new ExternalMouseWheel( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return ExternalMouseWheel		 */		public static function get $() : ExternalMouseWheel {			return ExternalMouseWheel.getInstance( );			}				/**		 * initialize!		 */		public function init() : void {			if (ExternalInterface.available) {				try {					ExternalInterface.addCallback( "externalMouseEvent", externalMouseEvent );					if (checkJavaScriptReady( )) {						trace( "ExternalInterface is ready!" );					} else {						trace( "ExternalInterface is NOT ready: creating timer ..." );						var readyTimer : Timer = new Timer( 100, 10 );						readyTimer.addEventListener( TimerEvent.TIMER, timerHandler );						readyTimer.start( );					}				} catch (se : SecurityError) {					trace( "Security Error: " + se.message );				} catch (e : Error) {					trace( "Error: " + e.message );				}			}					}		private function checkJavaScriptReady() : Boolean {			var isReady : Boolean = ExternalInterface.call( "sekati.external.isReady" );			return isReady;		}		private function timerHandler(event : TimerEvent) : void {			var isReady : Boolean = checkJavaScriptReady( );			if (isReady) {				trace( "ExternalInterface IS TOTALLY READY DUDE :-)" );				Timer( event.target ).stop( );			}		}		/**		 * Catch the callback from javascript and dispatch an ExternalMouseEvent to mac clients.		 * @param delta - mousewheel delta.		 */		private function externalMouseEvent(delta : int) : void {			dispatchEvent( new ExternalMouseEvent( ExternalMouseEvent.MOUSE_WHEEL, delta ) );		}	}}/** * Prevent external instantiation. */internal class SingletonEnforcer {}