/** * sekati.events.DeviceEvent * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.events {	import flash.events.Event;	/**	 * DeviceEvent provides a base event for <code>Camera</code> and <code>Microphone</code> devices.	 */	public class DeviceEvent extends Event {		/**		 * @eventType "cameraMute" fires when the camera is muted.		 */		public static const CAMERA_MUTE : String = 'cameraMute';		/**		 * @eventType "cameraUnmute" fires when the camera is unmuted.		 */		public static const CAMERA_UNMUTE : String = 'cameraUnmute';				/**		 * @eventType "cameraActivity" fires when the camera is unmuted.		 */		public static const CAMERA_ACTIVITY : String = 'cameraActivity';				/**		 * @eventType "microphoneMute" fires when the microphone is muted.		 */		public static const MICROPHONE_MUTE : String = 'microphoneMute';		/**		 * @eventType "microphoneUnmute" fires when the camera is unmuted.		 */		public static const MICROPHONE_UNMUTE : String = 'microphoneUnmute';		/**		 * @eventType "microphoneActivity" fires when the camera is unmuted.		 */		public static const MICROPHONE_ACTIVITY : String = 'microphoneActivity';				/*** @private */						protected var _activating : Boolean;		/**		 * DeviceEvent Constructor		 */		public function DeviceEvent(type : String, activating : Boolean = false, bubbles : Boolean = true, cancelable : Boolean = false) {			super( type, bubbles, cancelable );			_activating = activating;		}		/**		 * @inheritDoc		 */		override public function clone() : Event {			return new DeviceEvent( type, _activating, bubbles, cancelable );		}		/**		 * <code>Boolean</code> representing whether the device is experiencing activity (<code>true</code>) or not (</code>false</code>).		 */		public function get activating() : Boolean {			return _activating;		}	}}