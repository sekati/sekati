/** * sekati.events.AppEventDispatcher * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.events {	import flash.events.Event;	import flash.events.EventDispatcher;		/**	 * AppEventDispatcher provides a central dispatching and eventing target for the API.	 * @see sekati.events.AppEvent	 */	public class AppEventDispatcher extends EventDispatcher {		private static var _instance : AppEventDispatcher;		/**		 * AppEventDispatcher Singleton Constructor		 * @param $ SingletonEnforcer - internal to the AS file; the param prevents external instantiation without error.		 */		public function AppEventDispatcher( $ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "sekati.events.AppEventDispatcher is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );				}		}		/**		 * Singleton Accessor		 * @return AppEventDispatcher		 */		public static function getInstance() : AppEventDispatcher {			if( _instance == null ) _instance = new AppEventDispatcher( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return AppEventDispatcher		 */		public static function get $() : AppEventDispatcher {			return AppEventDispatcher.getInstance( );			}		/**		 * @inheritDoc		 */		override public function addEventListener( type : String, listener : Function, useCapture : Boolean = false, priority : int = 0, useWeakReference : Boolean = false ) : void {			_instance.addEventListener( type, listener, useCapture, priority, useWeakReference );		}		/**		 * @inheritDoc		 */		override public function removeEventListener( type : String, listener : Function, useCapture : Boolean = false ) : void {			_instance.removeEventListener( type, listener, useCapture );		}		/**		 * Dispatches a <code>AppEvent</code>.		 */		override public function dispatchEvent( event : Event ) : Boolean {			return _instance.dispatchEvent( event );		}		/**		 * @inheritDoc		 */		override public function hasEventListener( type : String ) : Boolean {			return _instance.hasEventListener( type );		}		/**		 * @inheritDoc		 */		override public function willTrigger(type : String) : Boolean {			return _instance.willTrigger( type );		}			}}/** * Internal class is accessible only to this AS file and is used  * as a constructor param to enforce proper Singleton behavior. */internal class SingletonEnforcer {}	