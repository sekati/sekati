/** * sekati.core.App * @version 1.0.0 * @author jason m horwitz | sekati.com | tendercreative.com * Copyright (C) 2008 jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.core {	import flash.text.StyleSheet;	import sekati.display.Canvas;	import sekati.log.Logger;	import sekati.net.NetBase;	/**	 * App is -the- static class for centralizing & storing core application instances, 	 * listeners, broadcasters, debuggers, objects, vars & constants.	 * 	 * PLEASE NOTE: This class no longer requires any initialization:	 * @see com.project.core.Bootstrap	 */	dynamic public class App {		/**		 * Enables API name to be retrieved at runtime or when reverse engineering.		 */		public static const NAME : String = 'Sekati API';		/**		 * Enables API version to be retrieved at runtime or when reverse engineering.		 */		public static const VERSION : String = 'Public Alpha 3.0.0.5 - "Spring" | http://sekati.googlecode.com | http://api.sekati.com';		/**		 * Enables API version date to be retrieved at runtime or when reverse engineering.		 */		public static const DATE : String = '01.30.08';		/**		 * Enables API copyright information to be retrieved at runtime or when reverse engineering.		 */		static public const AUTHOR : String = 'Copyright (c) 2007-2008 jason m horwitz | sekati.com | Sekati LLC. All Rights Reserved.';						/* APPLICATION CONFIGURATION AS SPECIFIED IN CONFIG XML */		/**		 * Application name as defined in config.xml		 */		public static var APP_NAME : String;				/**		 * Derived application path.		 */		public static var PATH : String = NetBase.isOnline( ) ? NetBase.getPath( ) : "";				/**		 * Location of the config.xml file.		 */		public static var CONF_URI : String = ( !Canvas.flashVars["conf_uri"] ) ? App.PATH + "xml/config.xml" : Canvas.flashVars["conf_uri"];				/**		 * Crossdomain location		 */		public static var CROSSDOMAIN_URI : String;				/**		 * External data XML location		 */		public static var DATA_URI : String;				/**		 * External CSS location		 */		public static var CSS_URI : String;				/**		 * Determines whether advanced <code>Logger</code> output is generated.		 */		public static var DEBUG_ENABLE : Boolean;				/**		 * Determines whether address-bar deeplinking is enabled.		 */		public static var FLINK_ENABLE : Boolean;				/**		 * Determines whether GoogleAnalytics is utilized via <code>Urchin</code>		 */		public static var TRACK_ENABLE : Boolean;				/**		 * Determines whether keyboard management is enabled.		 */		public static var KEY_ENABLE : Boolean;				/**		 * Stores the appropriate buffer time for flv media.		 */		public static var FLV_BUFFER_TIME : Number;				/**		 * Stores a reference to the Logger singleton.		 */		public static var log : Logger;				/**		 * Generic object which <code>Bootstrap</code> loads external data 		 * in for runtime storage and application data centralization.		 */		public static var db : Object = new Object( );				/**		 * The parsed application stylesheet.		 */		public static var css : StyleSheet = new StyleSheet( );				//public static var cmenu:ContextualMenu = new ContextualMenu ( _root );				/**		 * App Static Constructor		 */		public function App() {			throw new Error( "App is a static class and cannot be instantiated." );		}		}}