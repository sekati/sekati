/** * sekati.managers.KeyManager * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.managers {	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;	/**	 * KeyManager	 */	public class KeyManager extends EventDispatcher {		protected static var _instance : KeyManager;		/**		 * KeyManager Singleton Constructor		 * @param $ SingletonEnforcer - internal to the AS file; the param prevents external instantiation without error.		 */		public function KeyManager( $ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "KeyManager is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );				}		}		/**		 * Singleton Accessor		 * @return KeyManager		 */		public static function getInstance() : KeyManager {			if( _instance == null ) _instance = new KeyManager( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return KeyManager		 */		public static function get $() : KeyManager {			return KeyManager.getInstance( );			}	}}/** * Internal class is accessible only to this AS file * and is used as a constructor param to enforce * proper Singleton behavior. */internal class SingletonEnforcer {}		