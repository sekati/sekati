/** * sekati.managers.KeyManager * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.managers {	import flash.display.DisplayObject;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;	//import flash.ui.Keyboard;	import sekati.display.Canvas;			/**	 * KeyManager provides an interface for the centralized catching and dispatching of 	 * KeyEvents or via direct coupling of Keyboard events to actions.	 * 	 * TODO - Unfinished: do not implement yet: consider using charCode if not one of the KeyboardEvent keyCodes:	 * String.fromCharCode(event.keyCode)	 * e.g: if (keyEvent.charCode == String("p").charCodeAt(0)) { ... }	 * 	 * @example <listing version="3.0">	 * // initialize the KeyManager:	 * KeyManager.$.init( this.stage ); // if no Stage instance is passed the API Canvas.stage reference is used.	 * 	 * // create a response relationship between a key and method:	 * KeyManager.$.registerKey( keyCode : int, response : Function );	 * 	 * // create a response between a key combo and a method:	 * KeyManager.$.registerKeyCombo( keyCodes : Array, response : Function );	 * </listing>	 * 	 * @see sekati.display.Canvas	 * @see http://livedocs.adobe.com/flex/3/html/help.html?content=Capturing_User_Input_3.html	 * @see http://livedocs.adobe.com/flex/201/langref/flash/ui/Keyboard.html	 */	public class KeyManager extends EventDispatcher {		protected static var _instance : KeyManager;		protected var keyMap : Object;		/**		 * KeyManager Singleton Constructor		 * @param $ SingletonEnforcer - internal to the AS file; the param prevents external instantiation without error.		 */		public function KeyManager( $ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "KeyManager is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );				}			// initialize the key manager			keyMap = new Object( );			Canvas.stage.addEventListener( KeyboardEvent.KEY_DOWN, keyPress );			Canvas.stage.addEventListener( KeyboardEvent.KEY_UP, keyRelease );			Canvas.stage.addEventListener( Event.DEACTIVATE, clearKeys );		}		/**		 * Singleton Accessor		 * @return KeyManager		 */		public static function getInstance() : KeyManager {			if( _instance == null ) _instance = new KeyManager( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return KeyManager		 */		public static function get $() : KeyManager {			return KeyManager.getInstance( );			}		// EVENT HANDLERS 				/**		 * Add the key to the <code>keyMap</code>.		 */		protected function keyPress(e : KeyboardEvent) : void {			if (!(e.keyCode in keyMap)) {				trace( "adding " + e.keyCode + " | charCode: " + e.charCode + " | keyLocation: " + e.keyLocation );				keyMap[e.keyCode] = true;			}		}		/**		 * Remove the key from the <code>keyMap</code>.		 */		protected function keyRelease(e : KeyboardEvent) : void {			if (e.keyCode in keyMap) {				trace( "removing keyCode: " + e.keyCode + " | charCode: " + e.charCode + " | keyLocation: " + e.keyLocation );				delete keyMap[e.keyCode];			}					}		/**		 * Clear the keyMap.		 */		protected function clearKeys(e : Event) : void {			keyMap = new Object( );		}		// HELPERS		/**		 * Returns true or false if the key represented by the		 * keyCode passed is being pressed		 */		public function isDown(keyCode : uint) : Boolean {			return Boolean( keyCode in keyMap );		}				// TRIGGERS				/**		 * Add a key or key combo.		 * 		 * @example <listing version="3.0">		 * KeyManager.$.addKeyListener( "run", [Keyboard.CONTROL, Keyboard.ENTER], runProgram );		 * KeyManager.$.addKeyListener( "copy", [Keyboard.CONTROL, c], copyText, myText ); 		 * </listing>		 */		public function addKeyListener(name : String, keys : Array, trigger : Function, focusTarget : DisplayObject = null) : void {		}		public function removeKeyListener() : void {		}	}}/** * Internal class is accessible only to this AS file and is used  * as a constructor param to enforce proper Singleton behavior. */internal class SingletonEnforcer {}		