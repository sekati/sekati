/** * sekati.pv.PvComplexModelMouse * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.pv {	import sekati.pv.PaperBase;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.parsers.Collada;	/**	 * PrimativeCone	 */	public class PvComplexModelMouse extends PaperBase {		public var cow : DisplayObject3D;		//Distance the camera should be from the model		public var distance : Number = 1000; 		/**		 * Constructor		 */		public function PvComplexModelMouse() {			super( );			init( );		}		override protected function init3d() : void {			cow = new Collada( "../deploy/assets/cow.dae" );			cow.moveDown( 100 );			cow.scale = 3;			_scene.addChild( cow );		}		override protected function processFrame() : void {			// The next line is a bit of a mouthful, but it's quite simple really.			// It just gets the Y position of your mouse, and sets the camera.y to a			// value between -800 and 800, depending on the Y position of your mouse			// (If mouseY = 0 then camera.y = 800. If mouseY = stage.height, camera.y = -800)			_camera.y = -(((mouseY - (stage.height / 2)) / stage.height) * 1600);         			// We don't want the camera to move further away from the model, so we do this:			_camera.moveForward( _camera.distanceTo( cow ) - distance );         			// We now want to rotate the object depending on			// the Xmouse position. This is really simple.			cow.rotationY = -((mouseX / stage.width) * 360); //Rotation                 	 // NOTE: This will only work if you only have one object in your scene.         	// I'll write a more advanced movement tutorial soon 		}					}}