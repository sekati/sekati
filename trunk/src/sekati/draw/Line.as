/** * sekati.draw.Line * @version 1.0.2 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.draw {	import flash.display.Shape;	import sekati.draw.DrawStyle;	import sekati.draw.IDrawable;		/**	 * Line provides a Tweenable drawn line Shape.	 */	public class Line extends Shape implements IDrawable {		protected var _sx : Number;		protected var _sy : Number;		protected var _ex : Number;		protected var _ey : Number;		protected var _thickness : Number;		protected var _color : uint;		protected var _alpha : Number;		protected var _pixelHinting : Boolean;		protected var _scaleMode : String;		protected var _caps : String;		protected var _joints : String;		protected var _miterLimit : Number;		/**		 * Line Constructor		 * @example <listing version="3.0">		 * var line:Line = new Line( 0, 0, 100, 100, 1, 0xff00ff );		 * addChild( line );		 * Tweener.addTween( line, {sx:0, sy:0, ex:500, ey:250, color:0xffcc00, time:3, transition:"linear"} );		 * </listing>		 */		public function Line(startX : Number, startY : Number, endX : Number, endY : Number, thickness : Number = DrawStyle.THICKNESS, color : uint = DrawStyle.COLOR, alpha : Number = DrawStyle.ALPHA, pixelHinting : Boolean = DrawStyle.HINTING, scaleMode : String = DrawStyle.SCALE_MODE, caps : String = null, joints : String = DrawStyle.JOINTS, 		 miterLimit : Number = DrawStyle.MITER_LIMIT) {			_sx = startX;			_sy = startY;			_ex = endX;			_ey = endY;			_thickness = thickness;			_color = color;			_alpha = alpha;			_pixelHinting = pixelHinting;			_scaleMode = scaleMode;			_caps = caps;			_joints = joints;			_miterLimit = miterLimit;			draw( );		}		/**		 * @inheritDoc		 */		public function draw() : void {			this.graphics.lineStyle( _thickness, _color, _alpha, _pixelHinting, _scaleMode, _caps, _joints, _miterLimit );			this.graphics.moveTo( sx, sy );			this.graphics.lineTo( ex, ey );		}		/**		 * @inheritDoc		 */		public function redraw() : void {			clear( );			draw( );			}				/**		 * @inheritDoc		 */		public function clear() : void {			this.graphics.clear( );			}		/**		 * Return the start x pos.		 */		public function get sx() : Number {			return _sx;			//draw( );		}				/**		 * @private		 */		public function set sx(n : Number) : void {			_sx = n;			//draw( );		}				/**		 * Return the start y pos.		 */		public function get sy() : Number {			return _sy;		}		/**		 * @private		 */		public function set sy(n : Number) : void {			_sy = n;			//draw( );		}				/**		 * Return the end x pos.		 */		public function get ex() : Number {			return _ex;		}				/**		 * @private		 */		public function set ex(n : Number) : void {			_ex = n;			//draw( );		}		/**		 * Return the end y pos.		 */		public function get ey() : Number {			return _ey;		}		/**		 * @private		 */		public function set ey(n : Number) : void {			_ey = n;			//draw( );		}		/**		 * Return the color.		 */		public function get color() : uint {			return _color;		}		/**		 * @private		 */		public function set color(n : uint) : void {			_color = n;			//draw( );		}			/**		 * Return the thickness.		 */		public function get thickness() : uint {			return _thickness;		}		/**		 * @private		 */		public function set thickness(n : uint) : void {			_thickness = n;			//draw( );		}													}}