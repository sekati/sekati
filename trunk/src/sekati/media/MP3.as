/** * sekati.media.MP3 * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.media {	import sekati.events.MediaEvent;		import sekati.load.SoundLoader;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;	import flash.media.ID3Info;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;		/**	 * MP3 provides a common sound media control object.	 * @see sekati.load.SoundLoader	 */	public class MP3 extends EventDispatcher {		/*** @private */		protected var _loader : SoundLoader;		/*** @private */		protected var _url : String;		/*** @private */		protected var _autoPlay : Boolean;		/*** @private */		protected var _buffer : Number;		/*** @private */		protected var _loop : uint;		/*** @private */		protected var _channel : SoundChannel;		/*** @private */		protected var _transform : SoundTransform;		/*** @private */		protected var _volume : Number;		/*** @private */		protected var _pan : Number;		//		protected var _paused : Boolean;		protected var _started : Boolean;		protected var _lastPosition : Number;				/**		 * MP3 Constructor		 * @param url 		of the MP3 file.		 * @param autoPlay 	determines whether to play the file automatically or not.		 * @param volume 	of the sound (0 - 1)		 * @param pan 		of the sound (0 = balanced, -1 = left, 1 = right);		 * @param loop 		number of times to loop the <code>Sound</code> playback.		 * @param buffer 	time in milliseconds.		 */		public function MP3(url : String, autoPlay : Boolean = false, volume : Number = 1, pan : Number = 0, loop : uint = 1, buffer : Number = 1000) {			super( );			_url = url;			_autoPlay = autoPlay;			_volume = volume;			_pan = pan;			_loop = loop;			_buffer = buffer;			_paused = false;			_started = false;			_lastPosition = 0;					init( );		}		/**		 * Initialize the <code>SoundLoader</code>.		 */		protected function init() : void {			//_channel = new SoundChannel( );			_transform = new SoundTransform( volume, pan );			_loader = new SoundLoader( _url, _buffer );			// listen for content init ...			_loader.addEventListener( Event.INIT, initSound );			_loader.load( );		}		/**		 * Initialize the sound auto play.		 */		protected function initSound(e : Event) : void {			trace( "init sound" );			_loader.removeEventListener( Event.INIT, initSound );			if(_autoPlay) {				_channel = play( 0, _loop );			}			_channel.addEventListener( ProgressEvent.PROGRESS, progressHandler );		}		/**		 * Progress Handler		 */		protected function progressHandler(e : ProgressEvent = null) : void {			trace( "progress handler" );			_lastPosition = position;			//trace( "position: " + position + " length: " + length + " duration: " + duration );			//trace( "loaded: " + bytesLoaded + " total: " + bytesTotal );			dispatchEvent( new MediaEvent( MediaEvent.PROGRESS, null, percentLoaded, percentPlayed ) );		}		/**		 * Generates a new <code>SoundChannel</code> object to play back the sound.		 */		public function play(startTime : Number = 0, loops : int = 0) : SoundChannel {			_started = true;			_paused = false;			_channel = sound.play.apply( null, [ startTime, loops, _transform ] );			return _channel;		}		/**		 * Stop the <code>SoundChannel</code> sound playback.		 */		public function stop() : void {			_paused = true;			_channel.stop( );		}		/**		 * Returns the currently available number of bytes in this sound object.		 */		public function get bytesLoaded() : uint {			return _loader.bytesLoaded;		}		/**		 * Returns the total number of bytes in this sound object.		 */		public function get bytesTotal() : int {			return _loader.bytesTotal;		}		/**		 * Return the percent loaded (1 based %).		 */		public function get percentLoaded() : Number {			return ( bytesLoaded / bytesTotal );		}		/**		 * Return the percent played (1 based %).		 */		public function get percentPlayed() : Number {			return ( position / duration );		}		/**		 * Returns the buffering state of external MP3 files.		 */		public function get isBuffering() : Boolean {			return sound.isBuffering;		}		/**		 * The <code>Sound</code> object for manipulation.		 */		public function get sound() : Sound {			return _loader.content;		}				/**		 * Return the <code>SoundLoader</code>.		 */		public function get loader() : SoundLoader {			return _loader;		}		/**		 * The <code>Sound</code> URL.		 */		public function get url() : String {			return _url;		}		/**		 * The length of the current sound in milliseconds.		 */		public function get length() : Number {			return sound.length;		}		/**		 * The <code>Sound</code> duration.		 */		public function get duration() : Number {			return int( length / (bytesLoaded / bytesTotal) );		}		/**		 * The <code>SoundChannel</code> position.		 */		public function get position() : Number {			return _channel.position;		}			/**		 * The playing <code>SoundChannel</code>.		 */		public function get channel() : SoundChannel {			return _channel;		}		/*** @private */		public function set channel(channel : SoundChannel) : void {			_channel = channel;		}		/**		 * Provides access to the metadata that is part of an MP3 file.		 */		public function get id3() : ID3Info {			return sound.id3;				}		/**		 * The <code>Sound</code> volume.		 */		public function get volume() : Number {			return _volume;		}		/*** @private */		public function set volume(volume : Number) : void {			_volume = volume;			_transform.volume = volume;			_channel.soundTransform = _transform;		}		/**		 * The <code>Sound</code> pan.		 */		public function get pan() : Number {			return _pan;		}		/*** @private */		public function set pan(pan : Number) : void {			_pan = pan;			_transform.pan = _pan;			_channel.soundTransform = _transform;					}				/**		 * The <code>SoundTransform</code>.		 */		public function get transform() : SoundTransform {			return _transform;		}		/*** @private */		public function set transform(transform : SoundTransform) : void {			_transform = transform;		}	}}