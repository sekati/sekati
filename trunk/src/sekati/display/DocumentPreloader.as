/** * sekati.display.DocumentPreloader * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.display {	import sekati.display.Document;	import sekati.events.BootstrapEvent;	import sekati.load.SWFLoader;	import sekati.log.Logger;		import flash.events.Event;	import flash.events.ProgressEvent;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;		/**	 * XXX - !!! Warning !!! This class in is-progress & incomplete: do not attempt to implement yet.	 * 	 * DocumentPreloader provides a "headless" style <code>Document</code> API implementation	 * specifically designed for creating visual preloaders for full API application SWF's.	 * 	 * @inheritDoc	 * 	 * @see sekati.display.Document	 */	public class DocumentPreloader extends Document {		protected var loader : SWFLoader;		/**		 * DocumentPreloader Constructor		 */		public function DocumentPreloader() {			super( );		}		/**		 * Initialize the API running the Bootstrap sequence "headless" (sans <code>config.xml</code>).		 * @see sekati.display.Document#initAPI		 */		override protected function initAPI(hasBootstrap : Boolean = false) : void {			super.initAPI( hasBootstrap );		}		/**		 * Preloader initialized successfully: start preloading of the application SWF.		 * @see sekati.display.Document.#initEntryPoint		 */		override protected function initEntryPoint() : void {			super.initEntryPoint( );			Logger.$.warn( this, "initEntryPoint() should be overridden & loadContent() called here." );		}		/**		 * Load an API application SWF & listen for its <code>BootstrapEvent.APP_INIT</code> event.		 * @param url 	of the application SWF to be loaded.		 */		protected function loadContent( url : String ) : void {			Logger.$.info( this, "loadApplication(" + url + ")" );			loader = new SWFLoader( url );			loader.context = new LoaderContext( true, new ApplicationDomain( ) );			//loader.context = new LoaderContext( true, ApplicationDomain.currentDomain );			loader.addEventListener( Event.INIT, contentInitHandler );			loader.addEventListener( ProgressEvent.PROGRESS, contentProgressHandler );			loader.load( );		}		/**		 * API application SWF load progress handler.		 */		protected function contentProgressHandler(e : ProgressEvent) : void {			Logger.$.info( this, "Application SWF Progress: " + loader.percent + "%" );		}		/**		 * Add the loaded application SWF on stage.		 */		protected function contentInitHandler(e : Event) : void {			Logger.$.info( this, "applicationInitHandler" );			loader.removeEventListener( Event.INIT, contentInitHandler );			loader.removeEventListener( ProgressEvent.PROGRESS, contentProgressHandler );			loader.addEventListener( BootstrapEvent.APP_INIT, contentBootstrapInit );					addChild( loader.content );		}		/**		 * The API application SWF bootstrap completed successfully.		 */		protected function contentBootstrapInit(e : BootstrapEvent) : void {			Logger.$.notice( this, "Application SWF Bootstrap APP_INIT fired!" );			loader.removeEventListener( BootstrapEvent.APP_INIT, contentBootstrapInit );		}	}}