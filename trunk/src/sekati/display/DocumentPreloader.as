/** * sekati.display.DocumentPreloader * @version 1.0.3 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.display {	import sekati.events.BootstrapEvent;	import sekati.load.ApplicationLoader;	import sekati.log.Logger;	import sekati.validators.StringValidator;		import flash.display.Loader;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageQuality;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.Security;	import flash.system.fscommand;			/**	 * The <code>DocumentPreloader</code> class is an <b>API independent shell</b> designed to load <i>Sekati API</i> <code>Document</code> driven SWF applications.	 * In other words; the <code>DocumentPreloader</code> should be extended and used as the <b>Main Document Class</b> for any <i>preloader SWF</i> use to load an 	 * API driven SWF.	 * 	 * <p>The main methods that can be overridden and customized are:<br>	 * <ul><li><code>initMovieProperties</code> - initializes SWF movie properties.</li>	 * <li><code>configUI</code> - a stub area to initialize the look/feel of the preloader.</li>	 * <li><code>progress</code> -  invoked during the loading process, you may use the properties <code>percent, bytesLoaded, bytesTotal</code></li>	 * <li><code>resize</code> - invoked when the stage initializes and resizes for liquid layout preloaders.</li>	 * <li><code>initApplication</code> -invoked when the application has completed loading and is ready to take control. Override to run <i>outro</i> sequences and call <code>super.initApplication</code> when the <i>outro</i> is complete.</li></ul>	 * 	 * <b>Note:</b> that the API bootstrap sequence will begin when the loaded API swf is added to the stage in <code>initLoadedSwf()</code>.	 * @see sekati.display.Document	 */	 	public class DocumentPreloader extends Sprite {		/**		 * The preloader for the preloader SWF.		 */		protected var _preloader : ApplicationLoader;		/**		 * The disposable <code>XML URLLoader</code> to manage the <code>config.xml</code>.		 */		protected var _xmlLoader : URLLoader;		/**		 * The <code>Loader</code> containing the <code>Document</code> drive API Application SWF.		 */		protected var _loader : Loader;		/*** @private */		protected var _percent : Number;		/*** @private */		protected var _bytesLoaded : uint;			/*** @private */		protected var _bytesTotal : uint;					/**		 * DocumentPreloader Constructor		 */		public function DocumentPreloader() {			addEventListener( Event.ADDED_TO_STAGE, initDocumentPreloader );		}		/**		 *  Initializes the preloader and movie properties: invoked when the stage becomes available.		 */		protected function initDocumentPreloader(e : Event = null) : void {			Logger.$.status( this, "### - DocumentPreloader Initialized ..." );			removeEventListener( Event.ADDED_TO_STAGE, initDocumentPreloader );			initMovieProperties( );			_preloader = new ApplicationLoader( this );			_preloader.addEventListener( BootstrapEvent.APP_LOAD, initPreloader );		}		/**		 * Initializes SWF movie properties.		 * 		 * <p><b>Customization:</b> Override this method & adjust to fit your application specification.</p>		 */		protected function initMovieProperties() : void {			Logger.$.info( this, "### - Initializing Movie Properties ..." );			Security.allowDomain( "*" );			Security.allowInsecureDomain( "*" );			fscommand( "swLiveConnect", "true" );			fscommand( "allowscale", "false" );			fscommand( "showmenu", "false" );			fscommand( "fullscreen", "false" );						stage.frameRate = 31;			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.quality = StageQuality.HIGH;			stage.stageFocusRect = false;						}				/**		 * Load the API Application <code>config.xml</code>.		 * 		 * <p><b>Customization:</b> Override this method to execute any custom code, such as creating the visual preloader.</p>		 */		protected function initPreloader(e : Event = null) : void {			_preloader.removeEventListener( BootstrapEvent.APP_LOAD, initPreloader );			var confURI : String = ( !root.loaderInfo.parameters['conf_uri'] ) ? "xml/config.xml" : root.loaderInfo.parameters['conf_uri'];							Logger.$.info( this, "### - Loading API Config [" + confURI + "] ..." );			_xmlLoader = new URLLoader( );			_xmlLoader.load( new URLRequest( confURI ) );			_xmlLoader.addEventListener( Event.COMPLETE, initApplicationLoader );			stage.addEventListener( Event.RESIZE, resize );		}		/**		 * Load the API Application SWF.		 */		protected function initApplicationLoader(e : Event) : void {			_xmlLoader.removeEventListener( Event.COMPLETE, initApplicationLoader );			XML.ignoreWhitespace = XML.ignoreComments = true;			var xml : XML = new XML( e.target.data );			var applicationURI : String = xml.preload.application;			var request : URLRequest = new URLRequest( applicationURI ); 			if(StringValidator.isBlank( applicationURI )) {				Logger.$.fatal( this, "### DocumentPreloader DEATH: API Application URI not found ###" );				throw new Error( "DocumentPreloader Death." );								return;			}			Logger.$.status( this, "### - Loading API Application [" + applicationURI + "] ..." );			_loader = new Loader( );			_loader.contentLoaderInfo.addEventListener( Event.COMPLETE, initApplication );			_loader.contentLoaderInfo.addEventListener( ProgressEvent.PROGRESS, progress );			_loader.load( request );		}		/**		 * Initialize the loaded API Application SWF.		 * 		 * <p><b>Customization:</b> Override this method to delay API SWF initialization, and execute any visual 		 * preloader '<i>outro</i>' animation before application initializes. If this method is not overridden, 		 * the API SWF will initialize as soon as its load completes.</p>		 */		protected function initApplication(e : Event = null) : void {			Logger.$.info( this, "### - Initializing Application Hand-off ..." );			_xmlLoader = null;			_loader.contentLoaderInfo.removeEventListener( Event.COMPLETE, initApplication );			_loader.contentLoaderInfo.removeEventListener( ProgressEvent.PROGRESS, progress );			stage.removeEventListener( Event.RESIZE, resizeHandler );			addChild( _loader.content );		}		/**		 * API Application SWF progress handler.		 * 		 * <p><b>Customization:</b> Override this method to execute any custom code to visualize progress in your preloader.</p>		 */		protected function progress(e : ProgressEvent) : void {			_bytesLoaded = e.bytesLoaded;			_bytesTotal = e.bytesTotal;			_percent = e.bytesLoaded / e.bytesTotal;		}			/**		 * Wrap the <code>resize</code> method with a <code>try ... catch</code> to address the known stage related		 * <a href="http://bugs.adobe.com/jira/browse/FP-434">Flash Player bug</a>.		 * @see http://bugs.adobe.com/jira/browse/FP-434		 * @see http://hubflanger.com/stage-resize-and-the-stagewidth-and-stageheight-properties/		 */		private function resizeHandler(e : Event) : void {			try {				resize( e );			} catch ( err : Error) {			}		}		/**		 * Stub function to invoke upon a stage resize.		 * 		 * <p><b>Customization:</b> Override this method to execute any custom resize logic as the API has yet to initialize.</p>		 */		protected function resize(e : Event = null) : void {		}					/**		 * The percentage (<code>0 - 1</code> scale) of the Application SWF currently loaded.		 */		public function get percent() : Number {			return (!isNaN( _percent )) ? _percent : 0;		}		/**		 * The number of <i>loaded</i> bytes of the Application SWF.		 */		public function get bytesLoaded() : Number {			return (!isNaN( _bytesLoaded )) ? _bytesLoaded : 0;		}		/**		 * The number of <i>total</i> bytes of the Application SWF.		 */				public function get bytesTotal() : Number {			return (!isNaN( _bytesTotal )) ? _bytesTotal : 0;					}	}}