/** * sekati.display.InteractiveSprite * @version 1.1.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.display {	import flash.events.Event;		import flash.events.MouseEvent;		import sekati.display.CoreSprite;	/**	 * InteractiveSprite provides a common API construct for interactive sprite objects.	 */	public class InteractiveSprite extends CoreSprite {		/**		 * InteractiveSprite Constructor		 */		public function InteractiveSprite() {			super( );			interactiveMode = true;		}		/**		 * Add listeners when added to stage.		 */		override protected function onStage(e : Event = null) : void {			_this.addEventListener( MouseEvent.MOUSE_OVER, over, false, 0, true );			_this.addEventListener( MouseEvent.MOUSE_OUT, out, false, 0, true );			_this.addEventListener( MouseEvent.CLICK, click, false, 0, true );			_this.addEventListener( MouseEvent.MOUSE_DOWN, press, false, 0, true );			_this.addEventListener( MouseEvent.MOUSE_UP, release, false, 0, true );		}		/**		 * Remove the listeners when removed from the stage.		 */		override protected function offStage(e : Event = null) : void {			_this.removeEventListener( MouseEvent.MOUSE_OVER, over );			_this.removeEventListener( MouseEvent.MOUSE_OUT, out );			_this.removeEventListener( MouseEvent.CLICK, click );			_this.removeEventListener( MouseEvent.MOUSE_DOWN, press );			_this.removeEventListener( MouseEvent.MOUSE_UP, release );							}		/**		 * Stub: mouse over event handler.		 */		protected function over(e : MouseEvent = null) : void {		}				/**		 * Stub: mouse out event handler.		 */		protected function out(e : MouseEvent = null) : void {		}		/**		 * Stub: click event handler.		 */		protected function click(e : MouseEvent = null) : void {		}			/**		 * Stub: press event handler.		 */		protected function press(e : MouseEvent = null) : void {			_this.stage.addEventListener( MouseEvent.MOUSE_UP, releaseOutside, false, 0, true );		}				/**		 * Stub: release event handler.		 */		protected function release(e : MouseEvent = null) : void {		}		/**		 * Stub: release outside event handler.		 */		protected function releaseOutside(e : MouseEvent = null) : void {			_this.stage.removeEventListener( MouseEvent.MOUSE_UP, releaseOutside );			}								}}