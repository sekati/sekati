/** * SekatiSWFLoader * @version 1.0.0 * @author pj ahlberg * Copyright (C) 2009  pj ahlberg. All Rights Reserved. */package sekati.display{	import flash.display.Loader;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;		/**	 * The API <code>Canvas</code> (<code>sekati.display.Document</code>'s superclass): exposes top-level, <i>"global"</i>	 * access to the <code>stage</code>, <code>root</code>, <code>loaderInfo</code> & <code>flashVar</code> for 	 * all classes (including non-DisplayObject classes).	 * 	 * <p>Developers implementing the API may find it handy to reference these objects via their static references:<ul>	 * <li><code>Canvas.stage</code></li>	 * <li><code>Canvas.root</code></li>	 * <li><code>Canvas.loaderInfo</code></li>	 * <li><code>Canvas.flashVars</code></li></ul></p>	 * 	 * <p><b>Note:</b> <code>Canvas</code> supports the loading of API implemented application in to other	 * SWF application or running <i>"standalone"</i>. This is accomplished by calling <code>setReferences()</code>	 * in both the <code>Canvas</code> constructor & in the <code>ADDED_TO_STAGE</code> event handler of the subclassed 	 * <code>Document</code> Class. This prevents failure when being loaded in to another SWF's <code>DisplayList</code>.</p>	 * 	 * @see sekati.display.Document	 */	 	public class APILoader extends Sprite {				protected var _xmlLoader : URLLoader;		protected var _xml : XML;		protected var _loader : Loader;		public function APILoader() {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						this.addEventListener( Event.ADDED_TO_STAGE, addedToStage);			this.addEventListener( Event.ADDED_TO_STAGE, loadXML);		}				protected function addedToStage(e:Event):void		{			this.removeEventListener( Event.ADDED_TO_STAGE, addedToStage);					}				protected function loadXML(e:Event):void		{			this.removeEventListener( Event.ADDED_TO_STAGE, loadXML);						_xml = new XML();						var xmlPath:String = ( !root.loaderInfo.parameters['conf_uri'] ) ? "xml/config.xml" : root.loaderInfo.parameters['conf_uri'];								_xmlLoader = new URLLoader();			_xmlLoader.load(new URLRequest(xmlPath));			_xmlLoader.addEventListener(Event.COMPLETE, xmlLoadComplete);		}				protected function xmlLoadComplete(e : Event) : void		{			XML.ignoreWhitespace = true;			XML.ignoreComments = true;			_xml = new XML(e.target.data);			_xmlLoader.removeEventListener(Event.COMPLETE, xmlLoadComplete);			initLoader();		}				protected function initLoader():void		{						_loader = new Loader();			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, swfLoadComplete);			_loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, swfProgress);			_loader.load(new URLRequest(_xml.uri.applicationswf));					}				protected function swfProgress(e : ProgressEvent) : void		{			var percentLoaded:Number = e.bytesLoaded/e.bytesTotal;			animateProgress(percentLoaded);		}				protected function animateProgress(perc:Number) : void{}				protected function swfLoadComplete(e : Event) : void		{			_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, swfLoadComplete);			_loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, swfProgress);						animateComplete();		}				protected function animateComplete():void		{			initLoadedSwf();		}				protected function initLoadedSwf():void		{			addChild(_loader.content);		}	}}