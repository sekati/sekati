/** * sekati.tests.unit.FileTypeValidatorTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.unit {	import sekati.validators.FileTypeValidator;		import sekati.tests.unit.APITestCase;	/**	 * FileTypeValidatorTest	 */	public class FileTypeValidatorTest extends APITestCase {		public function FileTypeValidatorTest(methodName : String = null) {			super( methodName );		}		public function testFileTypeImage() : void {			var str0 : String = "foo.jpg";			var str1 : String = "foo.exe";						var str2 : String = "FOO.JPG";									assertTrue( "is image: " + str0, FileTypeValidator.isImage( str0 ) );			assertFalse( "is not image: " + str1, FileTypeValidator.isImage( str1 ) );			assertTrue( "is image: " + str2, FileTypeValidator.isImage( str2 ) );					}		public function testFileTypeSWF() : void {			var str0 : String = "foo.swf";			var str1 : String = "foo.exe";						assertTrue( "is SWF: " + str0, FileTypeValidator.isSWF( str0 ) );			assertFalse( "is not SWF: " + str1, FileTypeValidator.isSWF( str1 ) );				}			public function testFileTypeXML() : void {			var str0 : String = "foo.xml";			var str1 : String = "foo.exe";						assertTrue( "is XML: " + str0, FileTypeValidator.isXML( str0 ) );			assertFalse( "is not XML: " + str1, FileTypeValidator.isXML( str1 ) );				}		public function testFileTypeCSS() : void {			var str0 : String = "foo.css";			var str1 : String = "foo.exe";						assertTrue( "is CSS: " + str0, FileTypeValidator.isCSS( str0 ) );			assertFalse( "is not CSS: " + str1, FileTypeValidator.isCSS( str1 ) );				}								public function testFileTypeAudio() : void {			var str0 : String = "foo.mp3";			var str1 : String = "foo.exe";			var str2 : String = "foo.f4a";						assertTrue( "is AUDIO: " + str0, FileTypeValidator.isAudio( str0 ) );			assertFalse( "is not AUDIO: " + str1, FileTypeValidator.isAudio( str1 ) );				assertTrue( "is AUDIO: " + str2, FileTypeValidator.isAudio( str2 ) );			}			public function testFileTypeVideo() : void {			var str0 : String = "foo.flv";			var str1 : String = "foo.exe";			var str2 : String = "foo.f4v";						assertTrue( "is VIDEO: " + str0, FileTypeValidator.isVideo( str0 ) );			assertFalse( "is not VIDEO: " + str1, FileTypeValidator.isVideo( str1 ) );				assertTrue( "is VIDEO: " + str2, FileTypeValidator.isVideo( str2 ) );			}										public function testFileTypeText() : void {			var str0 : String = "foo.txt";			var str1 : String = "foo.exe";					assertTrue( "is TEXT: " + str0, FileTypeValidator.isText( str0 ) );			assertFalse( "is not TEXT: " + str1, FileTypeValidator.isText( str1 ) );			}						public function testFileTypeVariables() : void {			var str0 : String = "foo.vars";			var str1 : String = "foo.exe";					assertTrue( "is VARIABLES: " + str0, FileTypeValidator.isVariables( str0 ) );			assertFalse( "is not VARIABLES: " + str1, FileTypeValidator.isVariables( str1 ) );			}		public function testFileTypeBinary() : void {			var str0 : String = "foo.zip";			var str1 : String = "foo.txt";					assertTrue( "is BINARY: " + str0, FileTypeValidator.isBinary( str0 ) );			assertFalse( "is not BINARY: " + str1, FileTypeValidator.isBinary( str1 ) );			}			}}