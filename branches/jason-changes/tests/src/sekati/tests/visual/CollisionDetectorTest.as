/** * sekati.tests.visual.CollisionDetectorTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.collisions.AbstractCollisionDetector;	import sekati.collisions.CollisionAngle;	import sekati.collisions.CollisionDetector;	import sekati.display.CoreSprite;	import sekati.tests.visual.AbstractTestApplication;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;		/**	 * CollisionDetectorTest	 */	public class CollisionDetectorTest extends AbstractTestApplication {		public var detector : CollisionDetector;		public var target : CoreSprite;		public var messageBox : TextField;		public function CollisionDetectorTest() {			super( );		}		override protected function initEntryPoint() : void {			messageBox = new TextField( );			addChild( messageBox );						target = new CoreSprite( );			addChild( target );						target.graphics.beginFill( 0xff00ff, 0.25 );			target.graphics.drawCircle( 0, 0, 100 );			target.graphics.endFill( );			 			target.graphics.beginFill( 0xff00ff, 0.5 );			target.graphics.drawCircle( 0, 0, 75 );			target.graphics.endFill( );									target.graphics.beginFill( 0xff00ff, 1 );			target.graphics.drawCircle( 0, 0, 50 );			target.graphics.endFill( );						target.x = stage.stageWidth / 1.5;			target.y = stage.stageHeight / 2 - 40;						detector = new CollisionDetector( target );			detector.alphaThreshold = 0.5;			detector.returnAngleType = CollisionAngle.DEGREE;						for(var i : uint = 0; i < 4 ; i++) {				var circle : CoreSprite = new CoreSprite( );				circle.name = "circle " + i;				addChild( circle );				circle.graphics.beginFill( 0x00FFFF );				circle.graphics.drawCircle( 0, 0, 20 );				circle.graphics.endFill( );					circle.x = 40;				circle.y = stage.stageHeight / 4 * i + 40;				circle.buttonMode = true;				circle.addEventListener( MouseEvent.MOUSE_DOWN, mouseDown_Handler );					detector.addItem( circle );			}		}		private function mouseDown_Handler(e : MouseEvent) : void {			var circle : CoreSprite = e.currentTarget as CoreSprite;			stage.addChild( circle );			e.currentTarget.startDrag( );				e.currentTarget.addEventListener( MouseEvent.MOUSE_MOVE, checkForCollision );			e.currentTarget.addEventListener( MouseEvent.MOUSE_UP, mouseUp_Handler );		}		private function mouseUp_Handler(e : MouseEvent) : void {			e.currentTarget.stopDrag( );				e.currentTarget.removeEventListener( MouseEvent.MOUSE_MOVE, checkForCollision );			e.currentTarget.removeEventListener( MouseEvent.MOUSE_UP, mouseUp_Handler );		}		private function checkForCollision(e : MouseEvent) : void {			var collisions : Array = detector.checkCollisions( );				messageBox.text = "";			for(var i : uint = 0; i < collisions.length ; i++) {				var circle : Sprite = collisions[i].object1;				messageBox.appendText( "Collision detected on " + circle.name + ", angle: " + collisions[i].angle + ", overlap: " + collisions[i].overlap + "\n" );				messageBox.autoSize = "center";				messageBox.x = stage.stageWidth / 2 - messageBox.width / 2;			}		}	}}