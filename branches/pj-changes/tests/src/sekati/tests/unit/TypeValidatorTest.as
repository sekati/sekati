/** * sekati.tests.unit.TypeValidatorTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.unit {	import sekati.display.CoreSprite;	import sekati.tests.unit.APITestCase;	import sekati.validators.TypeValidator;	import flash.display.Sprite;			/**	 * TypeValidatorTest	 */	public class TypeValidatorTest extends APITestCase {		public function TypeValidatorTest(methodName : String = null) {			super( methodName );		}		public function testCompare() : void {			assertTrue( "Test if CoreSprite is a Sprite.", TypeValidator.compare( new CoreSprite( ), new Sprite( ) ) );		}		public function testIsExplicitInstanceOf() : void {			var foo : CoreSprite = new CoreSprite( );			assertTrue( "Check if instance is explicitly the same.", TypeValidator.isExplicitInstanceOf( foo, CoreSprite ) );		}		public function testIsObject() : void {			assertTrue( "{} is Object,", TypeValidator.isGenericObject( {} ) );			assertFalse( "[] is Object,", TypeValidator.isGenericObject( [] ) );		}		public function testIsInstanceOf() : void {			var foo : CoreSprite = new CoreSprite( );			assertTrue( "CoreSprite is Sprite", TypeValidator.isInstanceOf( foo, Sprite ) );		}		public function testIsPrimative() : void {			assertTrue( "false is a primative type.", TypeValidator.isPrimitive( false ) );			assertFalse( "new Sprite() is NOT a primative type.", TypeValidator.isPrimitive( new Sprite( ) ) );		}		public function testIsTypeOf() : void {			assertTrue( "13 is number type.", TypeValidator.isTypeOf( 13, 'number' ) );			assertFalse( "13 is int type.", TypeValidator.isTypeOf( 13, 'int' ) );		}		public function testIsNumber() : void {			assertTrue( "'7.5' is a number", TypeValidator.isNumber( "13.5" ) );		}		public function testIsBoolean() : void {			assertTrue( "'true' is Boolean", TypeValidator.isBoolean( "true" ) );		}		public function testIsHex() : void {			assertTrue( "'0xffcc00' is hexadecimal.", TypeValidator.isHex( '0xffcc00' ) );			assertTrue( "'0xffffffff' is hexadecimal.", TypeValidator.isHex( '0xffffffff' ) );			assertFalse( "'0' is NOT hexadecimal.", TypeValidator.isHex( '0' ) );		}		public function testIsOctal() : void {			assertTrue( "'01234567' is octal", TypeValidator.isOctal( '01234567' ) );			assertFalse( "'98765432' is NOT octal", TypeValidator.isOctal( '98765432' ) );		}		public function testTypeMatch() : void {			var foo : CoreSprite = new CoreSprite( );			assertTrue( "foo is type matched CoreSprite", TypeValidator.typesMatch( foo, CoreSprite ) );		}	}}