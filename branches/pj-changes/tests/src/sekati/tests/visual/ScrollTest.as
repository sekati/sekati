/** * sekati.tests.visual.ScrollTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.tests.visual.AbstractTestApplication;	import sekati.ui.Scroll;	import flash.display.MovieClip;	import flash.events.MouseEvent;		/**	 * ScrollTest	 */	public class ScrollTest extends AbstractTestApplication {		public var scrollA : Scroll;		public var scrollB : Scroll;		public var scrollCV : Scroll;		public var scrollCH : Scroll;		public var scrollD : Scroll;		public var scrollerA : MovieClip;		public var scrollerB : MovieClip;		public var scrollerC : MovieClip;		public var scrollerD : MovieClip;		public var moreBtn : MovieClip;		public var lessBtn : MovieClip;		public var jumpBtn : MovieClip;		public var resetBtn : MovieClip;		public function ScrollTest() {			super( );		}		override protected function initEntryPoint() : void {			//public function Scroll(content : DisplayObject, scrollArea : DisplayObject, gutter : Sprite, bar : Sprite, axis : String = "y", isInit : Boolean = true, hasMouseWheel : Boolean = true, isProportionalGutter : Boolean = true, isProportionalBar : Boolean = true, ease : String = "easeOutExpo", contentSizeTracker : DisplayObject = null, friction : Number = 0.8, ratio : Number = 0.5)			// scrollerA - vertical proportional			scrollA = new Scroll( scrollerA.contents, scrollerA.msk, scrollerA.gutter, scrollerA.bar );			//scrollA.slideContent (600);			// scrollerB - horizontal proportional			scrollB = new Scroll( scrollerB.contents, scrollerB.msk, scrollerB.gutter, scrollerB.bar, "x" );			//scrollB.slideContent(600);			// scrollerC - both axis proportional			scrollCV = new Scroll( scrollerC.contents, scrollerC.msk, scrollerC.gutterV, scrollerC.barV, "y", true, true, true, true, null, null, .8, .5 );			scrollCH = new Scroll( scrollerC.contents, scrollerC.msk, scrollerC.gutterH, scrollerC.barH, "x", true, false, true, true, null, null, .8, .5 );			// scrollerD - vertical fixed			scrollD = new Scroll( scrollerD.contents, scrollerD.msk, scrollerD.gutter, scrollerD.bar, "y", true, true, true, false, null, null, .8, .5 );			// extra scroll method demos			moreBtn.addEventListener( MouseEvent.CLICK, moreHandler );			lessBtn.addEventListener( MouseEvent.CLICK, lessHandler );			jumpBtn.addEventListener( MouseEvent.CLICK, jumpHandler );			resetBtn.addEventListener( MouseEvent.CLICK, resetHandler );			moreBtn.buttonMode = true;			lessBtn.buttonMode = true;			jumpBtn.buttonMode = true;			resetBtn.buttonMode = true;		}		private function moreHandler(e : MouseEvent) : void {			scrollA.movePercent( .05 );			scrollB.movePercent( .05 );			scrollCV.movePercent( .05 );			scrollCH.movePercent( .05 );			scrollD.movePercent( .05 );		}		private function lessHandler(e : MouseEvent) : void {			scrollA.movePercent( -.05 );			scrollB.movePercent( -.05 );			scrollCV.movePercent( -.05 );			scrollCH.movePercent( -.05 );			scrollD.movePercent( -.05 );		}		private function jumpHandler(e : MouseEvent) : void {			scrollA.moveContent( 200, .5 );			scrollB.moveContent( 200, .5 );			scrollCV.moveContent( 200, .5 );			scrollCH.moveContent( 200, .5 );			scrollD.moveContent( 200, .5 );			}			private function resetHandler(e : MouseEvent) : void {			scrollA.reset();			scrollB.reset();			scrollCV.reset();			scrollCH.reset();			scrollD.reset();					}				}}