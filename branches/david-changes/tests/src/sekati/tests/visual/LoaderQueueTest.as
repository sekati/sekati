/** * @version 1.0 * @author David Dahlstroem | hello@daviddahlstroem.com * Copyright (C) 2009 David Dahlstroem. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.events.LoaderQueueEvent;	import sekati.load.LoaderQueue;	import sekati.load.URLDataLoader;	import sekati.log.Logger;	import sekati.tests.visual.AbstractTestApplication;		import flash.net.URLRequest;			public class LoaderQueueTest extends AbstractTestApplication 	{				public static const URLList:Array = [				"http://localhost/sekati/deploy/assets/file1.jpg",				"http://localhost/sekati/deploy/assets/file2.jpg",				"http://localhost/sekati/deploy/assets/file3.jpg",				"http://localhost/sekati/deploy/assets/file4.jpg",				"http://localhost/sekati/deploy/assets/file5.jpg",				];				private var sequence:LoaderQueue;				public function LoaderQueueTest()		{			super();		}				override protected function initEntryPoint() : void {			super.initEntryPoint( );			Logger.$.info( this, "Test starting ..." );						sequence = new LoaderQueue(1);						sequence.addEventListener(LoaderQueueEvent.LOADER_COMPLETE, handleEvents);						sequence.addEventListener(LoaderQueueEvent.LOADER_DEQUEUED, handleEvents);						sequence.addEventListener(LoaderQueueEvent.LOADER_ENQUEUED, handleEvents);						//sequence.addEventListener(LoaderQueueEvent.LOADER_PROGRESS, handleEvents);						sequence.addEventListener(LoaderQueueEvent.LOADER_START, handleEvents);						sequence.addEventListener(LoaderQueueEvent.QUEUE_COMPLETE, handleEvents);						//sequence.addEventListener(LoaderQueueEvent.QUEUE_PROGRESS, handleEvents);						sequence.addEventListener(LoaderQueueEvent.QUEUE_START, handleEvents);						sequence.addEventListener(LoaderQueueEvent.QUEUE_START, handleEvents);						sequence.addEventListener(LoaderQueueEvent.QUEUE_STOP, handleEvents);						sequence.addEventListener(LoaderQueueEvent.LOADER_COMPLETE, handleEvents);									for(var i:int = 0; i < URLList.length; i++)			{				sequence.addLoader(new URLDataLoader(new URLRequest(URLList[i] as String)));			}						sequence.start();					}				private function handleEvents(e:LoaderQueueEvent):void		{			switch(e.type)			{				case LoaderQueueEvent.LOADER_COMPLETE:					Logger.$.trace(this, "Loader completed loading");				break;								case LoaderQueueEvent.LOADER_DEQUEUED:					Logger.$.trace(this, "Loader dequeued.");				break;								case LoaderQueueEvent.LOADER_ENQUEUED:					Logger.$.trace(this, "Loader enqueued.");				break;								case LoaderQueueEvent.LOADER_PROGRESS:					Logger.$.trace(this, "Loader progress at" + e.loader.progress);				break;								case LoaderQueueEvent.LOADER_START:					Logger.$.trace(this, "Loader start.");				break;									case LoaderQueueEvent.QUEUE_COMPLETE:					Logger.$.trace(this, "Queue completed.");				break;								case LoaderQueueEvent.QUEUE_PROGRESS:					Logger.$.trace(this, "Queue progress.");				break;								case LoaderQueueEvent.QUEUE_START:					Logger.$.trace(this, "Queue start.");				break;								case LoaderQueueEvent.QUEUE_STOP:					Logger.$.trace(this, "Queue stop.");				break;			}		}	}}