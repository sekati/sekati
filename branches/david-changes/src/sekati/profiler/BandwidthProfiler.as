/** * @version 1.0 * @author David Dahlstroem | hello@daviddahlstroem.com *  * Copyright (C) 2009 David Dahlstroem. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.profiler {	import sekati.core.Resetable;	import sekati.events.WeakEventDispatcher;		import flash.utils.getTimer;		public class BandwidthProfiler extends WeakEventDispatcher implements Resetable	{				private static var _instance:BandwidthProfiler;				private var _totalBytesLoaded:uint;				private var _totalByteWaste:uint;				private var _initTime:uint;				private var _loadOperationsTotal:uint;				private var _loadOperationsCancelled:uint;				private var _loadOperationsCurrent:uint;				private var _loadOperationsCompleted:uint;				private var _lastBandwidthRecordTime:uint;				private var _lastBandwidthRecordResult:uint;				private var _lastByteRegisterTime:uint;				private var _firstByteRegisterTime:uint;				public function BandwidthProfiler(singletonEnforcer:SingletonEnforcer = null)		{			super(this);						if(!singletonEnforcer)			{				throw new ArgumentError("BandwidthProfiler is a singleton class and may only be accessed via its accessor method getInstance()."); 			}						reset();		}				/**		 * BandwidthProfiler accessor.		 */				public static function getInstance():BandwidthProfiler 		{			if(_instance == null) _instance = new BandwidthProfiler(new SingletonEnforcer());			return _instance;		}				/**		 * Returns the total number of bytes loaded via the sekati.load package.		 */				public function get totalBytesLoaded():uint		{			return getInstance()._totalBytesLoaded;		}				/**		 * Returns the total number of bytes loaded and discarded via the sekati.load package.		 */				public function get totalByteWaste():uint		{			return getInstance()._totalByteWaste;		}				/**		 * Returns the number of load operations started via the sekati.load package.		 */				public function get loadOperationsTotal():uint		{			return _loadOperationsTotal;		}				/**		 * Returns the number of load operations currently in progress via the sekati.load package.		 */				public function get loadOperationsCurrent():uint		{			return _loadOperationsCurrent;		}				/**		 * Returns the number of load operations cancelled via the sekati.load package.		 */				public function get loadOperationsCancelled():uint		{			return _loadOperationsCancelled;		}				/**		 * Returns the number of load operations completed via the sekati.load package.		 */				public function get loadOperationsCompleted():uint		{			return _loadOperationsCompleted;		}				/**		 * Returns the current number of bytes loaded per second.		 */				public function get bytesPerSecond():Number		{			var currentTime:uint = getTimer();						var elapsedTime:Number = (currentTime - _lastBandwidthRecordTime) / 1000;						var result:Number = (totalBytesLoaded - _lastBandwidthRecordResult) / elapsedTime;						_lastBandwidthRecordResult = totalBytesLoaded;						_lastBandwidthRecordTime = getTimer();						return result; 		}				/**		 * Returns the average number of bytes loaded per second during loading.		 */				public function get bytesPerSecondAverage():Number		{			var elapsedTime:Number = (_lastByteRegisterTime - _firstByteRegisterTime) / 1000;						var result:Number = totalBytesLoaded / elapsedTime;						return (isNaN(result)) ? 0 : result;		}				/**		 * Timestamp for when the bandwidth profiling was initiated.		 */				public function get startTime():uint		{			return _initTime;		}				/**		 * Registers a load operation to BandwidthProfiler		 */				public function registerLoadOperation():void		{			_loadOperationsTotal++;		}				/**		 * Regsters a load operation currently loading to BandwidthProfiler.		 */				public function registerLoadOperationCurrent():void		{			_loadOperationsCurrent++;		}				/**		 * Registers a cancelled load operation to BandwidthProfiler.		 */				public function registerLoadOperationCancelled():void		{			if(_loadOperationsCurrent > 0) _loadOperationsCurrent--;			_loadOperationsCancelled++;		}				/**		 * Registers a completed load operation to BandwidthProfiler.		 */				public function registerLoadOperationCompleted():void		{			if(_loadOperationsCurrent > 0) _loadOperationsCurrent--;			_loadOperationsCompleted++;		}				/**		 * Registers bytes loaded to BandwidthProfiler.		 */				public function registerBytesLoaded(numBytes:uint):void		{			_totalBytesLoaded += numBytes;						_lastByteRegisterTime = getTimer();						if(!_firstByteRegisterTime == 0) _firstByteRegisterTime = getTimer();		}				/**		 * Registers byte waste to BandwidthProfiler.		 */				public function registerByteWaste(numBytes:uint):void		{			_totalByteWaste += numBytes;						_lastByteRegisterTime = getTimer();						if(!_firstByteRegisterTime == 0) _firstByteRegisterTime = getTimer();		}				/**		 * @inheritDoc		 */				public function reset():void		{			_totalBytesLoaded = 0;						_totalByteWaste = 0;						_loadOperationsTotal = 0;					_loadOperationsCancelled = 0;					_loadOperationsCurrent = 0;					_loadOperationsCompleted = 0;						_initTime = getTimer();						_lastBandwidthRecordTime = getTimer();						_lastBandwidthRecordResult = 0;						_firstByteRegisterTime = 0;		}				}}internal class SingletonEnforcer { }