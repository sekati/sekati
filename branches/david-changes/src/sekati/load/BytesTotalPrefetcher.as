/** * @version 1.0 * @author David Dahlstroem | hell@daviddahlstroem.com * Copyright (C) 2009 David Dahlstroem. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import sekati.core.ICoreInterface;	import sekati.events.LoaderEvent;	import sekati.events.WeakEventDispatcher;	import sekati.reflect.Stringifier;	import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;		public class BytesTotalPrefetcher extends WeakEventDispatcher implements ICoreInterface	{		private var _urlLoader:URLLoader;		private var _byteWaste:uint;		private var _bytesTotal:uint;		private var _prefetchComplete:Boolean = false;		public function BytesTotalPrefetcher(request:URLRequest)		{			super();						_urlLoader = new URLLoader(request);						_urlLoader.addEventListener(ProgressEvent.PROGRESS, prefetch);		}		public function destroy():void		{						if(!_urlLoader) return;						_urlLoader.removeEventListener(ProgressEvent.PROGRESS, prefetch);						try 			{				_urlLoader.close();			} catch(e:Error) 			{			}						_urlLoader = null;		}		override public function toString():String		{			return Stringifier.stringify(this);		}		public function getPrefetchedBytesTotal():uint		{			return _bytesTotal;		}		public function getByteWaste():uint		{			return _byteWaste;		}		public function get prefetchComplete():Boolean		{			return _prefetchComplete;		}		private function prefetch(e:ProgressEvent):void		{					_urlLoader.removeEventListener(ProgressEvent.PROGRESS, prefetch);						_byteWaste = _urlLoader.bytesLoaded;						_bytesTotal = _urlLoader.bytesTotal;						_prefetchComplete = true;						this.dispatchEvent(new LoaderEvent(LoaderEvent.BYTESTOTAL_PREFETCHED));						_urlLoader.close();						_urlLoader = null;		}	}}