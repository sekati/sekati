/** * @version 1.0 * @author David Dahlstroem | hell@daviddahlstroem.com * Copyright (C) 2009 David Dahlstroem. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import sekati.core.ICoreInterface;	import sekati.reflect.Stringifier;		import flash.errors.IllegalOperationError;		/**	 * Byterefence is an internal class for the sekati.load package used to reference loaders load progress.	 */		final internal class ByteReference extends Object implements ICoreInterface 	{				private static const BYTES_TOTAL:String = "bytesTotal";				private static const BYTES_LOADED:String = "bytesLoaded";				private var _target:Object;				public function ByteReference(target:Object = null)		{			super();						_target = target;		}				internal function get bytesTotal():int		{			if(!verifyTarget()) return 0;						return _target[BYTES_TOTAL] as uint;		}				internal function get bytesLoaded():uint		{						if(!verifyTarget()) return 0;						return _target[BYTES_LOADED] as uint;		}				internal function get hasValidTarget():Boolean		{			if(_target == null) return false;						return (_target.hasOwnProperty(BYTES_LOADED) && _target.hasOwnProperty(BYTES_TOTAL));		}				public function destroy():void		{			_target = null;		}				public function toString():String		{			return Stringifier.stringify(this);		}				private function verifyTarget():Boolean		{			if(!_target)			{				throw new TypeError("ByteReference target is not defined");				return false;			}						if(!hasValidTarget)			{				throw new IllegalOperationError("Target reference does not implement the bytesTotal property.");				return false;			}						return true;		}	}}