/** * @version 1.0 * @author David Dahlstroem | hello@daviddahlstroem.com * Copyright (C) 2009 David Dahlstroem. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import sekati.core.Cancelable;	import sekati.load.ByteReference;	import sekati.load.ILoader;	import sekati.log.Logger;		import flash.display.Loader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLRequest;	import flash.system.LoaderContext;		/**	 * DisplayLoader provides a standard base API loader for loading visual elements. 	 */		public class DisplayLoader extends AbstractLoader implements ILoader, Cancelable	{				public var loaderContext:LoaderContext;				/** @private */		protected var _loader:Loader;				public function DisplayLoader(request:URLRequest)		{			super(request);						reset();		}				/**		 * Cancels the loading process.		 * The <code>reset()</code> method must be called before calling the <code>load()</code> method again.		 */				public function cancel():void		{			try			{				_loader.close();			}			catch(e:Error)			{				Logger.$.warn(this, " has no stream open.");			}		}				/**		 * @inheritDoc		 */				override public function load():void		{			_loader.load(getURLRequest(), loaderContext);		}				/**		 * @inheritDoc		 */				override public function clone():Object		{			var			loader:DisplayLoader = new DisplayLoader(getURLRequest());						loader.loaderContext = loaderContext;						return loader;		}				/**		 * @inheritDoc		 */				override public function reset():void		{						if(_loader) destroy();						_loader = new Loader();						_byteReference = new ByteReference(_loader.contentLoaderInfo);						setEventListeners(true);		}				/**		 * @inheritDoc		 */				override public function destroy():void		{						cancel();						setEventListeners(false);						_byteReference.destroy();						_byteReference = null;						_loader = null;		}				/**		 * @inheritDoc		 */				override public function get data():*		{			return _loader.content;		}				private function setEventListeners(add:Boolean):void		{						if(!_loader) return;						var method:String = (add) ? "addEventListener" : "removeEventListener";						_loader.contentLoaderInfo[method](Event.OPEN, dispatchLoadStartEvent);						_loader.contentLoaderInfo[method](Event.COMPLETE, dispatchLoadCompleteEvent);						_loader.contentLoaderInfo[method](ProgressEvent.PROGRESS, dispatchLoadProgressEvent);						_loader.contentLoaderInfo[method](IOErrorEvent.IO_ERROR, dispatchIOErrorEvent);						_loader.contentLoaderInfo[method](SecurityErrorEvent.SECURITY_ERROR, dispatchSecurityErrorEvent);		}		}}