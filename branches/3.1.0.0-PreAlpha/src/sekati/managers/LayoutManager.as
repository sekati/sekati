/** * sekati.managers.LayoutManager * @version 1.0.2 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.managers {	import sekati.layout.Arrange;		import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.events.EventDispatcher;		/**	 * LayoutManager provides some basic layout management to a display list.	 */	public class LayoutManager extends EventDispatcher {				/*** @private */		protected var _container : DisplayObjectContainer;		/**		 * LayoutManager Constructor		 */		public function LayoutManager( target : DisplayObjectContainer ) {			_container = target;		}		/**		 * @param element		 * @param index		 * @return DisplayObject		 */		protected function buildElement( element : *, index : Number = 0 ) : DisplayObject {			if( index ) {				return _container.addChildAt( element, index );			} else {				return _container.addChild( element );			}		}		/**		 * @param arrangement		 * @param target		 * @param relativeTo		 */		public function arrange( arrangement : String, target : *, relativeTo : DisplayObject = null ) : * {			if( !_container.contains( target ) ) return null;						var index : Number = -1;			switch( arrangement ) {								case Arrange.SEND_TO_BACK:					index = 0;					break;								case Arrange.BRING_TO_FRONT:					index = _container.numChildren - 1;					break;								case Arrange.SEND_BACKWARD:					index = _container.getChildIndex( target ) - 1;					break;								case Arrange.BRING_FORWARD:					index = _container.getChildIndex( target ) + 1;					break;								case Arrange.BEHIND:					index = _container.getChildIndex( relativeTo ) - 1;					break;								case Arrange.INFRONT:					index = _container.getChildIndex( relativeTo ) + 1;					break;			}						if( index != -1 ) _container.setChildIndex( target, index );						return index;		}		/**		 * @param child		 * @return Number		 */		public function getChildIndex( child : DisplayObject ) : Number {			return Number( _container.getChildIndex( child ) );		}		/**		 * @param child		 * @return DisplayObject		 */		public function addChild( child : DisplayObject ) : DisplayObject {			return buildElement( child );		}		/**		 *		 * @param child		 * @param index		 * @return DisplayObject		 */		public function addChildAt( child : DisplayObject, index : Number = 0 ) : DisplayObject {			return buildElement( child, index );		}		/**		 * @param ...children		 * @return void		 */		public function removeChildren( ...children ) : void {			for each( var child:DisplayObject in children ) removeChild( child );		}		/**		 * @param child		 * @return DisplayObject		 */		public function removeChild( child : DisplayObject ) : DisplayObject {			return _container.removeChild( child );		}		/**		 * @param index		 * @return DisplayObject		 */		public function removeChildAt( index : Number ) : DisplayObject {			return _container.removeChildAt( index );		}		/**		 * @param name		 * @return DisplayObject		 */		public function getChildByName( name : String ) : DisplayObject {			return _container.getChildByName( name );		}		/**		 * @param index		 * @return DisplayObject		 */		public function getChildAt( index : Number ) : DisplayObject {			return _container.getChildAt( index );		}		/**		 * Does the stage contain this object?		 * @param child		 * @return Boolean		 */		public function contains( child : DisplayObject ) : Boolean {			return _container.contains( child );		}					}}