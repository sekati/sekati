/** * sekati.views.AbstractView * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.views {	import sekati.display.CoreSprite;	import sekati.utils.TypeEnforcer;		/**	 * AbstractView provides a UI view abstract.	 * 	 * <p>The purpose pf the <code>views</code> package is to offer view abstracts of the core <code>display</code> package 	 * <code>DisplayObjects</code> to encourate initializing code in <code>configUI()</code> to gain the boost of the <i>JIT</i>	 * which is not available within the <code>constructor</code> and give a simple method for initializing view-type 	 * container / controller classes.</p>	 */	public class AbstractView extends CoreSprite {		/**		 * AbstractView Constructor		 */		public function AbstractView() {			super( );			TypeEnforcer.enforceAbstract( this, AbstractView );			configUI( );		}		/**		 * Configure UI view elements.		 * 		 * <p>This method is called automatically by the constructor to leverage the 		 * <a href="http://en.wikipedia.org/wiki/Just-in-time_compilation">JIT: Just 		 * In Time compiler</a>. Code executed directly in the constructor doesn't run		 * under JIT and is therefore slower; thus the configUI method.</p>		 * @example <listing version="3.0">		 * override protected function configUI() : void {		 * 	//Logger.$.trace( _this, "configuring UI." );		 * 	}				 * </listing>		 */		protected function configUI() : void {		}	}}