/** * StringValidatorTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.unit {	import sekati.validators.StringValidator;	/**	 * StringValidatorTest	 */	public class StringValidatorTest extends APITestCase {		public function StringValidatorTest(methodName : String = null) {			super( methodName );		}		public function testIsValidEmail() : void {			var str0 : String = "fuck you";			var str1 : String = "fuckyou.com";			var str2 : String = "fuck@youcom";			var str3 : String = "fuck@you.com";			assertFalse( "is not valid email: " + str0, StringValidator.isValidEmail( str0 ) );			assertFalse( "is not valid email: " + str1, StringValidator.isValidEmail( str1 ) );			assertFalse( "is not valid email: " + str2, StringValidator.isValidEmail( str2 ) );			assertTrue( "is valid email: " + str3, StringValidator.isValidEmail( str3 ) );		}		public function testIsValidPhone() : void {			var str0 : String = "555.5555";			var str1 : String = "555-5555";			var str2 : String = "(555) 555-5555";			var str3 : String = "555-555-5555";			var str4 : String = "+1 555 555 5555";			var str5 : String = "5555555555";			assertFalse( "is not valid phone: " + str0, StringValidator.isValidatePhone( str0 ) );			assertFalse( "is not valid phone: " + str1, StringValidator.isValidatePhone( str1 ) );			assertTrue( "is not valid phone: " + str2, StringValidator.isValidatePhone( str2 ) );			assertTrue( "is valid phone: " + str3, StringValidator.isValidatePhone( str3 ) );			assertTrue( "is valid phone: " + str4, StringValidator.isValidatePhone( str4 ) );			assertTrue( "is valid phone: " + str5, StringValidator.isValidatePhone( str5 ) );		}		public function testIsURL() : void {			assertTrue( 'http://www.google.com is a URL', StringValidator.isURL( 'http://www.google.com' ) );			assertFalse( "'www.notreal.com' is not a URL", StringValidator.isURL( 'www.notreal.com' ) );			assertFalse( "'http;//malformed.com' is not a URL", StringValidator.isURL( 'http;//malformed.com' ) );		}		public function testIsBlank() : void {			assertTrue( '" " is blank!', StringValidator.isBlank( " " ) );			assertTrue( '"	" is blank!', StringValidator.isBlank( "	" ) );			assertFalse( '"sup?!" is not blank!', StringValidator.isBlank( "sup?!" ) );			assertFalse( '" sup?! " is not blank!', StringValidator.isBlank( " sup?! " ) );			assertFalse( '" 	sup?!	 " is not blank!', StringValidator.isBlank( " 	su p?! 	" ) );			assertFalse( '"FULL FACE" is not blank!', StringValidator.isBlank( "FULL FACE" ) );					}		public function testIsNumeric() : void {			assertTrue( "'12345 is a number string.", StringValidator.isNumeric( '12345' ) );			assertTrue( "'2.5' is a number (float) string", StringValidator.isNumeric( '2.5' ) );			assertFalse( "'f00' is not a number string", StringValidator.isNumeric( 'f00' ) );		}		public function testIsPOBox() : void {			assertTrue( "Is PO Box: 'P.O. Box 123'", StringValidator.isPOBox( 'P.O. Box 123' ) );			assertTrue( "Is PO Box: 'PO Box 123'", StringValidator.isPOBox( 'PO Box 123' ) );		}	}}