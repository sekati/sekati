/** * sekati.tests.visual.MicrophoneDeviceTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.draw.Rect;	import sekati.events.DeviceEvent;	import sekati.log.Logger;	import sekati.media.MicrophoneDevice;	import sekati.tests.visual.AbstractTestApplication;	import sekati.utils.ColorUtil;		import flash.display.Sprite;		/**	 * MicrophoneDeviceTest	 */	public class MicrophoneDeviceTest extends AbstractTestApplication {		private var mic : MicrophoneDevice;		private var activeMode : Rect;		private var activityBg : Rect;		private var activityBar : Sprite;		/**		 * MicrophoneDeviceTest Constructor		 */		public function MicrophoneDeviceTest() {			super( );		}		override protected function initEntryPoint() : void {			super.initEntryPoint( );			mic = new MicrophoneDevice( );						// draw activity status			var size : int = 10;			var alpha : Number = 0.5;			var color : uint = 0;						// draw some display			activeMode = new Rect( size, size, size, size * 10, 0, color, alpha );			activityBg = new Rect( 200, size, size * 3, size * 10, 0, color, alpha );			activityBar = new Sprite( );			activityBar.x = size * 3;			activityBar.y = size * 10;			activityBar.addChild( new Rect( 200, size, 0, 0, 0, 0x0000ff, alpha ) );			addChildren( activeMode, activityBg, activityBar );						// give some status			Logger.$.info( this, "Device Info ::  name: " + mic.deviceName + ", index: " + mic.deviceIndex + ", device list: " + mic.devices );						// give feedback on status			mic.addEventListener( DeviceEvent.DEVICE_ACTIVITY, handleActivity );		}		/**		 * Handler mic activity		 */		private function handleActivity(e : DeviceEvent) : void {			var activeColor : uint = (e.activating) ? 0x00ff00 : 0xff0000;			ColorUtil.setColor( activeMode, activeColor );			activityBar.scaleX = e.activityLevel * 0.01;		}	}}