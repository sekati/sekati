/** * sekati.load.XMLLoader * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.*;	import sekati.events.XMLEvent;		/**	 * XMLLoader (shockingly) handles the loading of XML documents.	 * <code>	 * var lo : XMLLoader = new XMLLoader( "my.xml" );	 * lo.addEventListener ( XMLEvent.ON_READY, xmlHandler );	 * var xmlHandler : Function = function(e:XMLEvent):void {	 * 	trace( "w00t:\n\n" + e.data );	 * };	 * lo.request( );	 * </code>	 */	public class XMLLoader extends EventDispatcher {		private var _loader : URLLoader;		private var _uri : String;		private var _xml : XML;		/**		 * XMLLoader Constructor		 * @param url 	of the XML document to load.		 * @param init 	begin loading now.		 */		public function XMLLoader(url : String, init : Boolean = true) {			_uri = url;			_loader = new URLLoader( );			_loader.addEventListener( Event.COMPLETE, completeHandler, false, 0, true );			_loader.addEventListener( Event.OPEN, openHandler, false, 0, true );			_loader.addEventListener( ProgressEvent.PROGRESS, progressHandler, false, 0, true );			_loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler, false, 0, true );			_loader.addEventListener( HTTPStatusEvent.HTTP_STATUS, httpStatusHandler, false, 0, true );			_loader.addEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler, false, 0, true );			if (init) {				request( );				}		}		/**		 * Return the xml content data.		 * @return XML		 */		public function get data( ) : XML {			return _xml;		}		/**		 * Load the xml document defined in the constructor.		 */		public function request( ) : void {			try {				_loader.load( new URLRequest( _uri ) );                			} catch ( error : Error ) {				trace( "Unable to load requested XML document." );			}		}			/**		 * Dispatch the XMLEvent.ON_READY event along with the xml data.		 */		protected function completeHandler(event : Event) : void {			_xml = XML( _loader.data );			var e : XMLEvent = new XMLEvent( XMLEvent.ON_READY, _xml );			dispatchEvent( e );		}		protected function openHandler(event : Event) : void {        	//trace("openHandler: " + event);		}		protected function progressHandler(event : ProgressEvent) : void {        	//trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);		}		protected function securityErrorHandler(event : SecurityErrorEvent) : void {            //trace("securityErrorHandler: " + event);		}		protected function httpStatusHandler(event : HTTPStatusEvent) : void {            //trace("httpStatusHandler: " + event);		}		protected function ioErrorHandler(event : IOErrorEvent) : void {            //trace("ioErrorHandler: " + event);		}				}}