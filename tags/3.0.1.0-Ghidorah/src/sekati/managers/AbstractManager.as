/** * sekati.managers.AbstractManager * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.managers {	import flash.events.EventDispatcher;	import sekati.reflect.Stringifier;			/**	 * AbstractManager	 */	public class AbstractManager extends EventDispatcher {		protected static var _instance : AbstractManager;		/**		 * AbstractManager Singleton Constructor		 * @param $ SingletonEnforcer - internal to the AS file; the param prevents external instantiation without error.		 */		public function AbstractManager( $ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( Stringifier.className( this ) + " is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );				}		}		/**		 * Singleton Accessor		 * @return AbstractManager		 */		public static function getInstance() : AbstractManager {			if( _instance == null ) _instance = new AbstractManager( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return AbstractManager		 */		public static function get $() : AbstractManager {			return AbstractManager.getInstance( );			}	}}/** * Internal class is accessible only to this AS file and is used  * as a constructor param to enforce proper Singleton behavior. */internal class SingletonEnforcer {}		