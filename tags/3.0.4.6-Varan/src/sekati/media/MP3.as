/** * sekati.media.MP3 * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.media {	import sekati.load.SoundLoader;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.media.ID3Info;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;		/**	 * MP3 provides a common sound media control object.	 * @see sekati.load.SoundLoader	 */	public class MP3 extends EventDispatcher {		/*** @private */		protected var _loader : SoundLoader;		/*** @private */		protected var _url : String;		/*** @private */		protected var _autoPlay : Boolean;		/*** @private */		protected var _buffer : Number;		/*** @private */		protected var _loop : uint;		/**		 * MP3 Constructor		 * @param url 		of the MP3 file.		 * @param autoPlay 	determines whether to play the file automatically or not.		 * @param loop 		number of times to loop the <code>Sound</code> playback.		 * @param buffer 	time in milliseconds.		 */		public function MP3(url : String, autoPlay : Boolean = false, loop : uint = 1, buffer : Number = 1000) {			super( );			_url = url;			_autoPlay = autoPlay;			_loop = loop;			_buffer = buffer;			init( );		}		/**		 * Initialize the <code>SoundLoader</code>.		 */		protected function init() : void {			_loader = new SoundLoader( _url, _buffer );			if(_autoPlay) {				_loader.addEventListener( Event.INIT, initAutoPlay );			}			_loader.load( );		}		/**		 * Initialize the sound auto play.		 */		protected function initAutoPlay(e : Event) : void {			_loader.removeEventListener( Event.INIT, initAutoPlay );			play( 0, _loop );		}		/**		 * Generates a new SoundChannel object to play back the sound.		 */		public function play(startTime : Number = 0, loops : int = 0, sndTransform : SoundTransform = null) : SoundChannel {			return sound.play.apply( null, [ startTime, loops, sndTransform ] );		}		/**		 * The <code>Sound</code> object for manipulation.		 */		public function get sound() : Sound {			return _loader.content;		}				/**		 * Return the <code>SoundLoader</code>.		 */		public function get loader() : SoundLoader {			return _loader;		}		/**		 * The <code>Sound</code> URL.		 */		public function get url() : String {			return _url;		}		/**		 * The length of the current sound in milliseconds.		 */		public function get length() : Number {			return sound.length;		}		/**		 * Provides access to the metadata that is part of an MP3 file.		 */		public function get id3() : ID3Info {			return sound.id3;				}		/**		 * Returns the currently available number of bytes in this sound object.		 */		public function get bytesLoaded() : uint {			return sound.bytesLoaded;		}		/**		 * Returns the total number of bytes in this sound object.		 */		public function get bytesTotal() : int {			return sound.bytesTotal;		}		/**		 * Returns the buffering state of external MP3 files.		 */		public function get isBuffering() : Boolean {			return sound.isBuffering;		}			}}