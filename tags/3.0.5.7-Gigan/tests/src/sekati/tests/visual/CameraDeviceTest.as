/** * sekati.tests.visual.CameraDeviceTest * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.tests.visual {	import sekati.utils.ColorUtil;		import sekati.events.DeviceEvent;		import sekati.draw.Rect;	import sekati.log.Logger;	import sekati.media.CameraDevice;	import sekati.tests.visual.AbstractTestApplication;	import flash.display.Sprite;			/**	 * CameraDeviceTest	 */	public class CameraDeviceTest extends AbstractTestApplication {		private var cam : CameraDevice;		private var activeMode : Rect;		private var activityBg : Rect;		private var activityBar : Sprite;		/**		 * CameraDeviceTest Constructor		 */		public function CameraDeviceTest() {			super( );		}		override protected function initEntryPoint() : void {			super.initEntryPoint( );			cam = new CameraDevice( );						// draw activity status			var size : int = 10;			var alpha : Number = 0.5;			var color : uint = 0xffffff;						// draw some display			activeMode = new Rect( size, size, (cam.x + size), (cam.y + cam.height - (size * 2)), 0, color, alpha );			activityBg = new Rect( (cam.width - (size * 4)), size, (activeMode.x + activeMode.width + (size * 2)), (cam.y + cam.height - (size * 2)), 0, color, alpha );			activityBar = new Sprite( );			activityBar.x = (activeMode.x + activeMode.width + (size * 2));			activityBar.y = (cam.y + cam.height - (size * 2));			activityBar.addChild( new Rect( (cam.width - (size * 4)), size, 0, 0, 0, 0x0000ff, alpha ) );			addChildren( cam, activeMode, activityBg, activityBar );						// give some status			Logger.$.info( this, "Device Info ::  name: " + cam.deviceName + ", index: " + cam.deviceIndex + ", device list: " + cam.devices );						// give feedback on status			cam.addEventListener( DeviceEvent.DEVICE_ACTIVITY, handleActivity );			cam.motionLevel = 25;		}		/**		 * Handler cam activity		 */		private function handleActivity(e : DeviceEvent) : void {			var activeColor : uint = (e.activating) ? 0x00ff00 : 0xff0000;			ColorUtil.setColor( activeMode, activeColor );			activityBar.scaleX = e.activityLevel * 0.01;		}	}}