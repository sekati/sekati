/** * sekati.formats.qrcode.QRDecoder * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.formats.qrcode {	import sekati.utils.TypeEnforcer;		import flash.display.BitmapData;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.ByteArray;			/**	 * QRDecoder	 */	public class QRDecoder {		public static function decode(pixels : BitmapData, debug : BitmapData = null) : DecodeResult {			var binaryPixels : BitmapData = createBinaryPixels( pixels );			debug.fillRect( new Rectangle( 0, 0, debug.width, debug.height ), 0x00000000 );			debug.draw( binaryPixels );			var patterns : Object = FinderPattern.findPattern( binaryPixels, debug );			var result : DecodeResult = new DecodeResult( );			result.pos.leftTop = patterns.leftTop; 			result.pos.rightTop = patterns.rightTop; 			result.pos.leftBottom = patterns.leftBottom; 			result.text = "";			return result;		}		private static function createBinaryPixels(pixels : BitmapData) : BitmapData {			var nDivision : int = 4;			var binaryPixels : BitmapData = new BitmapData( pixels.width, pixels.height );			var areaWidth : int = binaryPixels.width / nDivision;			var areaHeight : int = binaryPixels.height / nDivision;      			for (var ay : int = 0; ay < nDivision ; ay++) {				for (var ax : int = 0; ax < nDivision ; ax++) {					var rectangle : Rectangle = new Rectangle( ax * areaWidth, ay * areaHeight, areaWidth, areaHeight );					var samples : ByteArray = pixels.getPixels( rectangle );					var i : int;					var offset : int;					var threshold : uint = 0;					for (i = 0,offset = 0; i < samples.length ; i++,              offset += samples.length / (nDivision * nDivision)) {						threshold += samples[offset] & 0xff;					}					threshold = threshold / i + 0x40;					var color : uint = 0x00000000;					var maskColor : uint = 0x000000ff;        					binaryPixels.threshold( pixels, rectangle, new Point( ax * areaWidth, ay * areaHeight ), "<=", threshold, color, maskColor, false );				}			}			return binaryPixels;		}		/**		 * QRDecoder Static Constructor		 */		public function QRDecoder() {			TypeEnforcer.enforceStatic( this );		}	}}