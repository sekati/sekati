/** * sekati.formats.qrcode.QRKanji * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.formats.qrcode {	import sekati.formats.qrcode.QRData;		import flash.utils.ByteArray;			/**	 * QRKanji	 */	public class QRKanji extends QRData {		public function QRKanji(data : String) {			super( Mode.MODE_KANJI, data );		}		public override function write(buffer : BitBuffer) : void {			var data : ByteArray = QRUtil.getBytes( getData( ), QRUtil.getJISEncoding( ) );			var i : int = 0;			while (i + 1 < data.length) {								var c : int = ( (0xff & data[i]) << 8) | (0xff & data[i + 1]);				if (0x8140 <= c && c <= 0x9FFC) {					c -= 0x8140;				} else if (0xE040 <= c && c <= 0xEBBF) {					c -= 0xC140;				} else {					throw new Error( "illegal char at " + (i + 1) + "/" + c );				}								c = ( (c >>> 8) & 0xff) * 0xC0 + (c & 0xff);				buffer.put( c, 13 );								i += 2;			}			if (i < data.length) {				throw new Error( "illegal char at " + (i + 1) );			}		}		public override function getLength() : int {			return Math.floor( QRUtil.getBytes( getData( ), QRUtil.getJISEncoding( ) ).length / 2 );		}		}}