/** * sekati.profiler.Performance * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php *  * Initial concept adapted from hellokeita */package sekati.profiler {	import flash.display.*;	import flash.utils.*;	import flash.text.*;	import flash.system.System;	import flash.events.*;		/**	 * Performance provides a visual reference to FPS and RAM usage.	 * XXX - Please do not implement yet: this is only a sketch.	 */	public class Performance {		private static var instance : Performance;		private var time : Number = 0;		private var maxMem : Number = 0;		private var stage : Stage;		private var tf : TextField;		private var perf : Sprite;		/**		 * Performance Constructor		 */		public function Performance(s : Stage) {			if(instance) return;			stage = s;			instance = this;			init( );		}		private function init() : void {						tf = new TextField( );			tf.autoSize = "left";			tf.blendMode = "invert";			var textFormat : TextFormat = new TextFormat( );			textFormat.font = "Verdana";			textFormat.size = 9;			tf.defaultTextFormat = textFormat;						perf = new Sprite( );			perf.addChild( tf );			stage.addChild( perf );			stage.addEventListener( Event.ENTER_FRAME, check );		}		private function check(e : Event = null) : void {			var t : int = getTimer( );						var fps : int = Math.round( 1000 / (t - time) );			time = t;						var mem : Number = System.totalMemory / (1024 * 1024);			tf.text = "Memory: " + mem + " / " + maxMem + "\n";			tf.appendText( "FPS: " + fps );			perf.graphics.clear( );			perf.graphics.beginFill( 0x0000ff, .5 );			perf.graphics.drawRect( 0, 2, maxMem * 6, 12 );			perf.graphics.beginFill( 0xff0000, .8 );			perf.graphics.drawRect( 0, 2, mem * 6, 12 );			perf.graphics.beginFill( 0xff0000, .5 );			perf.graphics.drawRect( 0, 14, fps * 10, 12 );						if(mem > maxMem) maxMem = mem;			mem = NaN;						stage.setChildIndex( perf, stage.numChildren - 1 );		}	}}