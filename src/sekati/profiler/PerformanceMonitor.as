/** * sekati.profiler.PerformanceMonitor * @version 1.2.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php *  * Initial concept adapted from hellokeita */package sekati.profiler {	import sekati.math.MathBase;	import flash.display.*;	import flash.events.*;	import flash.system.System;	import flash.text.*;	import flash.utils.*;		/**	 * PerformanceMonitor provides a visual reference to FPS and RAM usage.	 */	final public class PerformanceMonitor {		private static var instance : PerformanceMonitor;		private var time : Number = 0;		private var maxMem : Number = 0;		private var maxFps : int = 0;		private var stage : Stage;		private var tf : TextField;		private var performanceUI : Sprite;		private static const BAR_ALPHA : Number = 0.5;		private static const BAR_HEIGHT : int = 12;		private static const BAR_MULTIPLIER : int = 10;		private static const MAX_MEM_COLOR : uint = 0x00FFFF;		private static const MEM_COLOR : uint = 0xFFFF00;		private static const FPS_COLOR : uint = 0xFF00FF;		/**		 * PerformanceMonitor Constructor		 */		public function PerformanceMonitor(stage : Stage) {			if(instance) return;			this.stage = stage;			instance = this;			init( );		}		/**		 * Initialize the UI		 */		private function init() : void {			tf = new TextField( );			tf.autoSize = TextFieldAutoSize.LEFT;			tf.blendMode = BlendMode.INVERT;			var textFormat : TextFormat = new TextFormat( );			textFormat.font = "Verdana";			textFormat.size = 9;			textFormat.leading = 1;			textFormat.letterSpacing = -0.7;			tf.defaultTextFormat = textFormat;			tf.autoSize = TextFieldAutoSize.LEFT;						performanceUI = new Sprite( );			performanceUI.x = performanceUI.y = 5;			performanceUI.addChild( tf );			stage.addChild( performanceUI );			stage.addEventListener( Event.ENTER_FRAME, update, false, 0, true );		}		/**		 * Update performance info.		 */		private function update(e : Event = null) : void {			var t : int = getTimer( );			var fps : int = Math.round( 1000 / (t - time) );			var mem : Number = MathBase.round( System.totalMemory / (1024 * 1024), 2 );			time = t;						var memCaption : String = "RAM: " + mem + " MB (" + Math.round( mem * 1024 ) + " kb)";			var maxMemCaption : String = " / " + maxMem + " MB (" + Math.round( maxMem * 1024 ) + " kb)";			var fpsCaption : String = "\nFPS: " + fps + " / " + maxFps;						tf.text = memCaption + maxMemCaption + fpsCaption;			performanceUI.graphics.clear( );			performanceUI.graphics.beginFill( MAX_MEM_COLOR, BAR_ALPHA );			performanceUI.graphics.drawRect( 0, 2, (maxMem * BAR_MULTIPLIER), BAR_HEIGHT );			performanceUI.graphics.beginFill( MEM_COLOR, (BAR_ALPHA + 0.3) );			performanceUI.graphics.drawRect( 0, 2, (mem * BAR_MULTIPLIER), BAR_HEIGHT );			performanceUI.graphics.beginFill( FPS_COLOR, BAR_ALPHA );			performanceUI.graphics.drawRect( 0, 14, (fps * BAR_MULTIPLIER), BAR_HEIGHT );						if(mem > maxMem) maxMem = mem;			if(fps > maxFps) maxFps = fps;						stage.setChildIndex( performanceUI, stage.numChildren - 1 );			stage.invalidate( );		}			/**		 * Destroy the PerformanceMonitor		 */		public function destroy() : void {			stage.removeEventListener( Event.ENTER_FRAME, update );			stage.removeChild( performanceUI );			tf = null;			performanceUI = null;			stage = null;			time = maxMem = maxFps = NaN;			instance = null;		}			}}