/** * sekati.profiler.PerformanceMonitor * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php *  * Initial concept adapted from hellokeita */package sekati.profiler {	import flash.display.*;	import flash.events.*;	import flash.system.System;	import flash.text.*;	import flash.utils.*;		import sekati.math.MathBase;		/**	 * PerformanceMonitor provides a visual reference to FPS and RAM usage.	 */	public class PerformanceMonitor {		private static var instance : PerformanceMonitor;		protected var time : Number = 0;		protected var maxMem : Number = 0;		protected var stage : Stage;		protected var tf : TextField;		protected var performanceUI : Sprite;		/**		 * PerformanceMonitor Constructor		 */		public function PerformanceMonitor(s : Stage) {			if(instance) return;			stage = s;			instance = this;			init( );		}				/**		 * Initialize the UI		 */		protected function init() : void {			tf = new TextField( );			tf.autoSize = "left";			tf.blendMode = BlendMode.INVERT;			var textFormat : TextFormat = new TextFormat( );			textFormat.font = "Arial";			textFormat.size = 9;			textFormat.leading = 3;			tf.defaultTextFormat = textFormat;			tf.autoSize = TextFieldAutoSize.LEFT;						performanceUI = new Sprite( );			performanceUI.addChild( tf );			stage.addChild( performanceUI );			stage.addEventListener( Event.ENTER_FRAME, update, false, 0, true );		}				/**		 * Update performance info.		 */		protected function update(e : Event = null) : void {			var t : int = getTimer( );			var fps : int = Math.round( 1000 / (t - time) );			var mem : Number = MathBase.round( System.totalMemory / (1024 * 1024), 2 );			time = t;			tf.text = "RAM: " + mem + " MB / " + maxMem + " MB\nFPS: " + fps;			performanceUI.graphics.clear( );			performanceUI.graphics.beginFill( 0x0000ff, .5 );			performanceUI.graphics.drawRect( 0, 2, maxMem * 6, 12 );			performanceUI.graphics.beginFill( 0xffff00, .8 );			performanceUI.graphics.drawRect( 0, 2, mem * 6, 12 );			performanceUI.graphics.beginFill( 0xff00ff, .5 );			performanceUI.graphics.drawRect( 0, 14, fps * 10, 12 );						if(mem > maxMem) maxMem = mem;			mem = NaN;						stage.setChildIndex( performanceUI, stage.numChildren - 1 );		}	}}