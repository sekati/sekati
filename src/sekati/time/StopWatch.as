/** * sekati.time.StopWatch * @version 1.0.0 * @author jason m horwitz | sekati.com | tendercreative.com * Copyright (C) 2008 jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.time {	import flash.utils.getTimer;		import sekati.core.CoreObject;		/**	 * StopWatch	 */	public class StopWatch extends CoreObject {		private var _initTime : Number;		private var _endTime : Number;		private var _lastLap : Number;		private var _ms : Number;		/**		 * Constructor		 * @param startNow		 */		public function StopWatch(startNow : Boolean = false) {			super( );			if(startNow) start( );		}		/**		 * start timer		 * @return Number ms since start (0)		 */		public function start() : Number {			_initTime = getTimer( );			_lastLap = _initTime;			return read( );		}		/**		 * stop timer		 * @return (Number) ms since start		 */		public function stop() : Number {			_endTime = getTimer( );			_ms = _endTime - _initTime;			return _ms;		}		/**		 * record and return lap		 * @return (Number) ms since last lap		 */		public function lap() : Number {			var now : Number = getTimer( );			_ms = now - _lastLap;			_lastLap = now;			return _ms;		}		/**		 * read total time		 * @return (Number) ms since stopwatch was initialized		 */		public function read() : Number {			var now : Number = getTimer( );			return now - _initTime;		}		/**		 * Destroy instance.		 */		override public function destroy() : void {			stop( );			super.destroy( );		}			}}