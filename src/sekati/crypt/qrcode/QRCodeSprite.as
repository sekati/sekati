/** * sekati.crypt.qrcode.QRCodeSprite * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.crypt.qrcode {	import flash.display.Graphics;		import flash.display.Sprite;	/**	 * QRCodeSprite	 */	public class QRCodeSprite extends Sprite {		private var qr : QRCode;		private var _text : String;		[Inspectable(enumeration="L,M,Q,H", defaultValue="H")]		public var errorCorrectLevel : String = "H";		/**		 * QRCodeSprite		 */		public function QRCodeSprite(str : String = "QRCode", size : int = 300) {			_text = str;			qr = null;			drawData( size, size );		}		public function get text() : String {			return _text;		}		public function set text(value : String) : void {			_text = value;			qr = null;		}		public function drawData(unscaledWidth : Number, unscaledHeight : Number) : void {			var padding : Number = 10;            			var size : Number = Math.min( unscaledWidth, unscaledHeight ) - padding * 2;			var xOffset : Number = (unscaledWidth - size) / 2;			var yOffset : Number = (unscaledHeight - size) / 2;			if (qr == null) {				qr = QRCode.getMinimumQRCode( text, ErrorCorrectionLevel[errorCorrectLevel] );			}            			var cs : Number = size / qr.getModuleCount( );			graphics.beginFill( 0xffffff );			graphics.drawRect( 0, 0, unscaledWidth, unscaledHeight );			graphics.endFill( );            			for (var row : int = 0; row < qr.getModuleCount( ) ; row++) {				for (var col : int = 0; col < qr.getModuleCount( ) ; col++) {					graphics.beginFill( (qr.isDark( row, col ) ? 0 : 0xffffff) );					graphics.drawRect( cs * col + xOffset, cs * row + yOffset, cs, cs );					graphics.endFill( );				}			}		}			public function decodeData() : String {			return "";		}		}}