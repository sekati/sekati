/** * sekati.collections.OrderedDictionary * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.collections {	import flash.utils.Dictionary;		import flash.utils.Proxy;	import flash.utils.flash_proxy;			/**	 * OrderedDictionary provides a <code>Dictionary</code> like collection 	 * object which persists the order of entries similar to an <code>Array</code>.	 * 	 * XXX - Warning: currently under development: do not use this class yet.	 * 	 * @see http://www.devslash.com/?p=55	 */	dynamic public class OrderedDictionary extends Proxy {		protected var _dict : Dictionary;		protected var _arr : Array;		/**		 * OrderedDictionary Constructor		 */		public function OrderedDictionary(weakKeys : Boolean = false) {			_dict = new Dictionary( weakKeys );			_arr = new Array( );		}		/**		 * Proxy internal <code>Dictionary</code> contents for easy reference.		 */		flash_proxy override function getProperty(name : *) : * {			//return (name is int) ? _arr[name] : _arr[_dict[name]];			if (name is Number) {				trace( "<-getProperty (as array): " + name );				return _arr[name];				} else {				trace( "<-getProperty (as dict): " + name );				var index : int = _dict[name];				return _arr[index];			}		}		/**		 * Proxy internal <code>Dictionary</code> contents for easy reference.		 * myOrdDict['fuc'] = me;		 */		flash_proxy override function setProperty(name : *, value : *) : void {			if (!(name in _dict)) {				trace( "->setProperty: " + name );				var index : int = _arr.push( value );				_dict[name] = index;			}		}		/**		 * @inheritDoc		 */		flash_proxy override function callProperty(name : *, ...args) : * {			return this[name].apply( this, args );		}		/**		 * Return the length of the OrderedDictionary		 */		public function get length() : uint {			return _arr.length;			}	}}