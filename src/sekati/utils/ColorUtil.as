/** * sekati.utils.ColorUtil * @version 1.1.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.utils {	import sekati.math.Range;		import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.geom.ColorTransform;	import sekati.math.Random;			/**	 * Static class wrapping various Color utilities.	 */	public class ColorUtil {		public static const RGB_MAX : uint = 256;		public static const HUE_MAX : uint = 360;		public static const PCT_MAX : uint = 100;		// RGB(A) HEX GETTERS & SETTERS		/**		 * Return the RGB(A) hexadecimal color value of a DisplayObject.		 * @param src 		of the display object.		 * @param x 		position to sample.		 * @param y 		position to sample.		 * @param getAlpha 	if true return is RGBA, else RGB.		 */		public static function getRGB(src : DisplayObject, x : uint = 0, y : uint = 0, getAlpha : Boolean = false) : uint {			var bmp : BitmapData = new BitmapData( src.width, src.height );			bmp.draw( src );			var color : uint = (!getAlpha) ? bmp.getPixel( int( x ), int( y ) ) : bmp.getPixel32( int( x ), int( y ) );			bmp.dispose( );			return color;		}		/**		 * Set the RGB(A) hexadecimal color value of a DisplayObject.		 */		public static function setRGB(src : DisplayObject, hex : uint) : void {			var ct : ColorTransform = src.transform.colorTransform;			ct.color = hex;			src.transform.colorTransform = ct;		}		// RGB COMPONENT CONVERTERS				/**		 * Convert an RGB hexidecimal value to an object containing its R,G,B components.		 */		public static function RGBtoComponents(hex : uint) : Object {			var tmp : Object = new Object( );			tmp.r = Math.floor( hex / (RGB_MAX * RGB_MAX) );			tmp.g = Math.floor( (hex / RGB_MAX) % RGB_MAX );			tmp.b = Math.floor( hex % RGB_MAX );			return tmp;					}			/**		 * Convert an RGB Object to a shexidecimal color value.		 */		public static function componentsToRGB(rgbObj : Object) : uint {			return valuesToRGB( rgbObj.r * RGB_MAX, rgbObj.g * RGB_MAX, rgbObj.b * RGB_MAX );		}		/**		 * Convert individual R, G, B values to a hexidecimal value.		 */		public static function valuesToRGB(a : uint,b : uint,c : uint) : uint {			var aa : * = (a.toString( 16 )).toUpperCase( );			if (aa.length < 2) aa = '0' + aa;			else if (aa.length > 2) aa = 'FF';						var bb : * = (b.toString( 16 )).toUpperCase( );			if (bb.length < 2) bb = '0' + bb;			else if (bb.length > 2) bb = 'FF';					var cc : * = (c.toString( 16 )).toUpperCase( );			if (cc.length < 2) cc = '0' + cc;			else if (cc.length > 2) cc = 'FF';						return int( '0x' + aa + bb + cc );					}					// COLOR TRANSFORM GETTERS, SETTERS & TRANSFORMATIONS		/**		 * Returns the transform value set by the last setTransform() call.		 * @return An object containing the current offset and percentage values for the color.		 */		public static function getTransform(src : DisplayObject) : Object {			var ct : ColorTransform = src.transform.colorTransform;			return {ra: ct.redMultiplier * 100, rb: ct.redOffset, ga: ct.greenMultiplier * 100, gb: ct.greenOffset, ba: ct.blueMultiplier * 100, bb: ct.blueOffset, aa:ct.alphaMultiplier * 100, ab: ct.alphaOffset};		}		/**		 * Set color transform information for a DisplayObject.		 * The colorTransformObject parameter is a generic object that you create from the new Object constructor. It has parameters specifying the percentage and 		 * offset values for the red, green, blue, and alpha (transparency) components of a color, entered in the format 0xRRGGBBAA.		 * @param transformObject An object created with the new Object constructor. This instance of the Object class must have the following properties 		 * that specify color transform values: ra, rb, ga, gb, ba, bb, aa, ab. These properties are explained in the above summary for the setTransform() method. 		 */		public static function setTransform( src : DisplayObject, transformObject : Object ) : void {			var t : Object = {ra:100, rb:0, ga:100, gb:0, ba:100, bb:0, aa:100, ab:0};			for (var p:String in transformObject) {				t[p] = transformObject[p];			}			var ct : ColorTransform = new ColorTransform( t['ra'] / 100, t['ga'] / 100, t['ba'] / 100, t['aa'] / 100, t['rb'], t['gb'], t['bb'], t['ab'] );			src.transform.colorTransform = ct;		}		/**		 * Inverts the color of the DisplayObject.		 */		public static function invertColor(src : DisplayObject) : void {			var t : Object = ColorUtil.getTransform( src );			ColorUtil.setTransform( src, {					ra : -t['ra'], ga : -t['ga'], ba : -t['ba'], rb : 255 - t['rb'], gb : 255 - t['gb'], bb : 255 - t['bb'] 				} ) ;		}		/**		 * Reset the color of the DisplayObject to its original view (pre-ColorTransformed).		 */		public static function resetColor(src : DisplayObject) : void { 			ColorUtil.setTransform( src, {ra:100, ga:100, ba:100, rb:0, gb:0, bb:0} ) ;		}					// STRING CONVERSIONS, PARSERS & FORMATTERS			/**		 * Parse a String representation of a color (hex or html) to uint.		 */		public static function toRGB(str : String) : uint {			if (str.substr( 0, 2 ) == '0x') {				str = str.substr( 2 );			} else if (str.substr( 0, 1 ) == '#') {				str = str.substr( 1 );				}			return parseInt( str, 16 );		}		/**		 * Converts the number passed in argument (the html color in hex with ECMAScript notation <code>0xrrggbb</code>) in a HTML string representation.		 */		public static function toRGBString( hex : uint) : String {			return "0x" + (hex.toString( 16 )).toUpperCase( ); 		}		/**		 * Converts the number passed in argument (the html color in hex with ECMAScript notation <code>0xrrggbb</code>) in a HTML string representation.		 */		public static function toHTML( hex : uint) : String {			return "#" + (hex.toString( 16 )).toUpperCase( ); 		}		// HUE http://natecook.com/downloads/color/AdvancedColor_2.as				/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-		 *	convert hue to rgb values using a linear transformation		 *	inputs:	min = minimum of r,g,b		 *			max = maximum of r,g,b		 *			hue	= value angle hue		 *	output:	an object with r,g,b properties on 0 to 1 scale		 * -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */		public static function hueToRGB(min : Number, max : Number, hue : Number) : Object {			var mu : Number, md : Number, F : Number, n : Number;					while (hue < 0) {				hue += HUE_MAX;			}			n = Math.floor( hue / 60 );			F = (hue - n * 60) / 60;			n %= 6;					mu = min + ((max - min) * F);			md = max - ((max - min) * F);					switch (n) {				case 0: 					return {r: max, g: mu, b: min};				case 1: 					return {r: md, g: max, b: min};				case 2: 					return {r: min, g: max, b: mu};				case 3: 					return {r: min, g: md, b: max};				case 4: 					return {r: mu, g: min, b: max};				case 5: 					return {r: max, g: min, b: md};			}		}		/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-		 *	convert rgb values to a hue using a linear transformation		 *	inputs:	red, grn, blu on 0 to 1 scale		 *	output:	a hue degree between 0 and 360		 * -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */		public static function RGBToHue(red : uint, green : uint, blue : uint) : uint {			var F, min, mid, max, n;					max = Math.max( red, Math.max( green, blue ) );			min = Math.min( red, Math.min( green, blue ) );					// achromatic case			if (max - min == 0) {				return 0;			}					mid = Range.center( red, green, blue );				// using this loop to avoid super-ugly nested ifs			while (true) {				if (red == max) {					if (blue == min) n = 0; else n = 5;					break;				}								if (green == max) {					if (blue == min) n = 1; else n = 2;					break;				}								if (red == min) n = 3; else n = 4;				break;			}					if ((n % 2) == 0) {				F = mid - min;			} else {				F = max - mid;			}			F = F / (max - min);					return 60 * (n + F);		}		// HSL				/**		 * Convert an RGB Hexidecimal value to HSL values		 * @param red 		0 - 1 scale.		 * @param green 	0 - 1 scale.		 * @param blue 		0 - 1 scale.		 * @return Object with h (hue), l (lightness), s (saturation) values:<ul>		 * <li><code>h</code> on 0 - 360 scale.</li>		 * <li><code>l</code> on 0 - 1 scale.</li>		 * <li><code>s</code> on 0 - 1 scale.</li></ul>		 */		public static function RGBtoHSL(red : uint, green : uint, blue : uint) : Object {			var min : Number, max : Number, delta : Number;			var l : uint, s : uint, h : uint = 0;							max = Math.max( red, Math.max( green, blue ) );			min = Math.min( red, Math.min( green, blue ) );						l = (min + max) / 2;					// L			if (l == 0) {				return {h:h, l:0, s:1};			}					delta = (max - min) / 2;					if (l < 0.5) {													// S				s = delta / l;			} else {				s = delta / (1 - l);			}			// H			h = RGBToHue( red, green, blue );					return {h:h, l:l, s:s};									}		// RANDOMIZABLES		/**		 * Generate a random hexidecimal color.		 * @see sekati.math.Random		 */		public static function randomRGB() : uint {			return Random.hexColor( );		}				/**		 * ColorUtils Static Constructor		 */		public function ColorUtil() {			throw new Error( "ColorUtils is a static class and cannot be instantiated." );		}	}}