/** * sekati.core.Bootstrap * @version 1.0.0 * @author jason m horwitz | sekati.com | tendercreative.com * Copyright (C) 2008 jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.core {	import flash.events.*;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.StyleSheet;	import sekati.core.App;	import sekati.events.AppEvent;	import sekati.external.Urchin;	import sekati.log.Logger;		import sekati.convert.BoolConversion;	/*	import sekati.net.NetBase;	import sekati.validate.StringValidation;	 */		/**	 * Bootstrap provides a common bootstrapping command & load	 * sequencer used to initialize API based applications. 	 * 	 * <p>Bootstrap is one of the three core components comprising	 * the base API; along side <code>sekati.display.Document</code>	 * (which instatiates <code>Bootstrap</code>) and <code>sekati.core.App</code>	 * (which stores the data the <code>Bootstrap</code> loads).</p>	 * 	 * <p>By default <code>Bootstrap</code> loads core configuration & XML data, 	 * CSS stylesheets & other customizable settings in to 	 * <code>sekati.core.App</code>. for storage & retrieval.</p>	 * 	 * <p>Each step in the <code>Bootstrap</code> sequence fires	 * a <i>"staging"</i> <code>AppEvent</code> to notify the application	 * of its <i>"boot phase"</i>. If any boot phase in the 	 * <code>_sequenceChain</code> fails its execution it will be retried 	 * until the <code>RETRY_MAX</code> limit has been exceeded at which 	 * point a the <code>AppEvent.APP_FAILURE</code> event will be dispatched	 * to notify the application of boot failure.</p>	 * 	 * <p><b>Customizations</b> may be made by extending and 	 * overriding the <code>Bootstrap</code> methods and 	 * <code>_sequenceChain</code>.</p>	 * 	 * @see sekati.display.Document	 * @see sekati.core.App	 */	public class Bootstrap extends EventDispatcher {		/**		 * The <code>_sequenceChain</code> defines a set of method references which are executed in sequence to prepare the API framework core.		 */		protected static var _sequenceChain : Array = [ 'loadConfig', 'loadData', 'loadStyle' ];		/**		 * The <code>_sequenceCount</code> bootstrap stage counter.		 */				protected static var _sequenceCount : uint = 0;		/**		 * The <code>RETRY_ATTEMPT</code> tracks bootstrap rety attempts.		 */					protected static var RETRY_ATTEMPT : uint = 0;		/**		 * code>RETRY_MAX</code>  maximum retries before Bootstrap errors out.		 */		protected static var RETRY_MAX : uint;			/**		 * @private		 */		protected var _this : Bootstrap;		/**		 * Bootstrap Constructor		 * @param maxRetryAttempts 	Number of times to retry each method in bootstrap before fatal error.		 */		public function Bootstrap(maxRetryAttempts : uint = 5) {			super( );			RETRY_MAX = maxRetryAttempts;			_this = this;			Logger.$.status( _this, "@@@ - Bootstrap Initialized ..." );			Urchin.track( "home" );			run( );		}		/**		 * Iterate through the <code>_sequenceChain</code> method & fire the <code>AppEvent.APP_INIT</code> event on completion.		 * @see sekati.events.AppEvent		 */		protected function run() : void {			if (_sequenceCount < _sequenceChain.length - 1) {				var methodName : String = _sequenceChain[_sequenceCount];				Logger.$.info( _this, "	--- Sequence => (" + (_sequenceCount + 1) + "/" + _sequenceChain.length + "): '" + methodName + "'" );				_this[methodName]( );				_sequenceCount++;			} else {				dispatchEvent( new AppEvent( AppEvent.APP_INIT ) );				Logger.$.status( _this, "@@@ - Application Initialized Successfully: auto-initialization event fired => " + AppEvent.APP_INIT );			}		}		/**		 * A method in the sequence chain failed - make retry attempts at each phase or dispatch the <code>AppEvent.APP_FAILURE</code> event.		 */		protected function retry() : void {			if (RETRY_ATTEMPT < RETRY_MAX) {				var _adjustedSequenceCount : uint = _sequenceCount - 1;				Logger.$.warn( _this, "??? - Sequence Attempt [" + (RETRY_ATTEMPT + 1) + "/" + RETRY_MAX + "] Failure => stage (" + _sequenceCount + "/" + _sequenceChain.length + "): '" + _sequenceChain[_adjustedSequenceCount] + "'" );				RETRY_ATTEMPT++;				_this[_sequenceChain[_adjustedSequenceCount]]( );			} else {				dispatchEvent( new AppEvent( AppEvent.APP_FAILURE ) );				Logger.$.fatal( _this, "!!! - BOOTSTRAP DEATH [Maximum Retries Exceeded: " + RETRY_ATTEMPT + "/" + RETRY_MAX + "] => stage (" + _sequenceCount + "/" + _sequenceChain .length + "): '" + _sequenceChain[_sequenceCount] + "' => Sorry, I tried but the application failed to boot." );				throw new Error( "Bootstrap Death" );			}		}			// SEQUENCED BOOTSTRAP METHODS		/**		 * Loads & parse <code>config.xml</code> to <code>App.config</code>		 * & dispatch <code>AppEvent.APP_CONFIG</code>.		 */		protected function loadConfig() : void {			var request : URLRequest = new URLRequest( App.CONF_URI );			var loader : URLLoader = new URLLoader( );			var onLoadXML : Function = function(ev : Event):void {				try {					var cXML : XML = new XML( ev.target['data'] );					//App.db['config'] = cXML;					// parse and deserialize core configuration					App.APP_NAME = cXML['app'].name;					App.APP_VERSION = cXML['app'].version;					App.CROSSDOMAIN_URI = cXML['uri'].crossdomain;					App.DATA_URI = cXML['uri'].data;					App.CSS_URI = cXML['uri'].css;					App.TRACK_ENABLE = BoolConversion.toBoolean( cXML['option'].track );					App.KEY_ENABLE = BoolConversion.toBoolean( cXML['option'].key );					App.DEEPLINK_ENABLE = BoolConversion.toBoolean( cXML['option'].deeplink );					App.LOG_ENABLE = BoolConversion.toBoolean( cXML['option'].log );					App.MEMORY_ALARM = int( cXML['option'].memory_alarm );					// end deserialization: configure log:					if (!App.LOG_ENABLE) {						Logger.$.warn( _this, "!!! - Logger disabled via config.xml: Goodbye World!" );						Logger.$.enabled = App.LOG_ENABLE;					}					dispatchEvent( new AppEvent( AppEvent.APP_CONFIG ) );					run( );									} catch (er : TypeError) {					Logger.$.error( _this, "!!! - loadConfig: XML parser failed (probably malformed) => " + er.message );				}							};			var onErrorXML : Function = function(e : Event):void {				retry( );			};			loader.addEventListener( Event.COMPLETE, onLoadXML );			loader.addEventListener( IOErrorEvent.IO_ERROR, onErrorXML );			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onErrorXML );			loader.load( request );						/*							// enable context menu 			Logger.$.info( _this, "@@@ Setting ContextMenu ..." );			//App.cmenu.addItem( App.APP_NAME );						// load crossdomain policy 			Logger.$.info( _this, "@@@ loading crossdomain policy: " + App.CROSSDOMAIN_URI );			//System.security.loadPolicyFile( App.CROSSDOMAIN_URI );			 */		}		/**		 * Loads & parse data from <code>App.DATA_URI</code> provided in <code>config.xml</code>.		 * Store it in <code>App.data</code> & dispatch <code>AppEvent.APP_DATA</code>.		 */		protected function loadData() : void {			var request : URLRequest = new URLRequest( App.DATA_URI );			var loader : URLLoader = new URLLoader( );			var onLoadXML : Function = function(ev : Event):void {				try {					var dXML : XML = new XML( ev.target['data'] );					App.db['data'] = dXML;					dispatchEvent( new AppEvent( AppEvent.APP_DATA ) );					//trace( App.db.data );					//trace(App.db.data.person.(@name == "Jason M Horwitz").age);					run( );									} catch (er : TypeError) {					Logger.$.error( _this, "!!! - loadData: XML parser failed (probably malformed) => " + er.message );				}							};			var onErrorXML : Function = function(e : Event):void {				retry( );			};			loader.addEventListener( Event.COMPLETE, onLoadXML );			loader.addEventListener( IOErrorEvent.IO_ERROR, onErrorXML );			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onErrorXML );			loader.load( request );		}			/**		 * Loads & parse the stylesheet from <code>App.CSS_URI</code> provided in <code>config.xml</code>.		 * Store it in <code>App.css</code> & dispatch <code>AppEvent.APP_STYLE</code>.		 * 		 * <p>Usage:<code><br>		 * 	tf.styleSheet = App.css;<br>		 * 	tf.htmlText = "<span class='test''>Hello World</span>";</code></p>		 */		protected function loadStyle() : void {			var request : URLRequest = new URLRequest( App.CSS_URI );			var loader : URLLoader = new URLLoader( );			var onLoadCSS : Function = function(ev : Event):void {				var sheet : StyleSheet = new StyleSheet( );  				sheet.parseCSS( loader.data );				App.css = sheet;				dispatchEvent( new AppEvent( AppEvent.APP_STYLE ) );				run( );			};			var onErrorCSS : Function = function (e : Event):void {				retry( );			};			loader.addEventListener( Event.COMPLETE, onLoadCSS );			loader.addEventListener( IOErrorEvent.IO_ERROR, onErrorCSS );			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onErrorCSS );			loader.load( request );							}	}}