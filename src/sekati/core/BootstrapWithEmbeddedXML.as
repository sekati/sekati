/* * BootstrapWithEmbeddedXML * @version 1.0.0 * @author Steven J Baughman | Tender * Copyright (C) 2009  Steven J Baughman, Tender. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.core {	import sekati.display.Canvas;		import sekati.events.BootstrapEvent;		import sekati.profiler.PerformanceMonitor;		import sekati.log.LogTarget;		import sekati.external.BrowserAddress;		import sekati.external.Urchin;		import sekati.managers.ContextMenuManager;			import flash.system.Security;			import sekati.utils.StringUtil;		import sekati.log.Logger;		import sekati.converters.BoolConverter;		import sekati.validators.StringValidator;		import sekati.core.App;			import flash.utils.ByteArray;			import sekati.core.Bootstrap;	/**	 * BootstrapWithEmbeddedXML	 * 	 * For when you're not able to externally load a config.xml file, but still want to use Sekati Framework.	 * 	 * Embeds config XML as EmbeddedConfig.	 * 	 * Isolated the config.xml loaded listener so it could be used for an embedded config.xml or a loaded one. 	 * Note: I have not updated the Bootstrap class to work with the isolated configXMLLoaded method.	 * 	 * Also have to delay the initial run() call until we've added the listener,	 * otherwise it runs instaneously before the BootstrapEvent is added	 * 	 * example:	 * Override initAPI in the Document class.	 * 	 * override protected function initAPI(hasBootstrap : Boolean = true) : void {			_bootstrap = new BootstrapWithEmbeddedXML( );			_bootstrap.addEventListener( BootstrapEvent.APP_INIT, entryPointHandler, false, 0, true );			BootstrapWithEmbeddedXML(_bootstrap).load();		}	 * 	 */	public class BootstrapWithEmbeddedXML extends Bootstrap {				[Embed(source="/../deploy/xml/config.xml",  mimeType="application/octet-stream")]		protected const EmbeddedConfig:Class;				public function BootstrapWithEmbeddedXML(maxRetryAttempts : uint = 5) {		//	super( maxRetryAttempts );			RETRY_MAX = maxRetryAttempts;			_this = this;			Logger.$.status( _this, "	@@@ - Bootstrap Initialized ..." );		}				public function load(): void {						run( );		}				/**		 * Loads & parse <code>config.xml</code> to <code>App.config</code>		 * & dispatch <code>BootstrapEvent.APP_CONFIG</code>.		 */		override protected function loadConfig() : void {			XML.ignoreWhitespace = XML.ignoreComments = true;			var byteArray:ByteArray = new EmbeddedConfig() as ByteArray;			configXMLLoaded(new XML(byteArray.readUTFBytes(byteArray.length)));		}				protected function configXMLLoaded(xml: XML):void {			try {				var cXML : XML = xml;				// parse and deserialize core configuration:				App.APP_NAME = cXML['app'].name;				App.APP_VERSION = cXML['app'].version;				App.CROSSDOMAIN_URI = (!StringValidator.isBlank( cXML['uri'].crossdomain )) ? cXML['uri'].crossdomain : '/crossdomain.xml';				App.CROSSDOMAIN_BOOTLOAD = BoolConverter.toBoolean( cXML['uri'].crossdomain.@load );				App.DATA_URI = cXML['uri'].data;				App.DATA_BOOTLOAD = BoolConverter.toBoolean( cXML['uri'].data.@load );				App.CSS_URI = cXML['uri'].css;				App.CSS_BOOTLOAD = BoolConverter.toBoolean( cXML['uri'].css.@load );				App.MANAGED_MENU = BoolConverter.toBoolean( cXML['option'].menu );				App.API_INFO = BoolConverter.toBoolean( cXML['option'].menu.@verbose );				App.FULLSCREEN_ENABLE = BoolConverter.toBoolean( cXML['option'].fullscreen );				App.TRACK_ENABLE = BoolConverter.toBoolean( cXML['option'].track );				App.DEEPLINK_ENABLE = BoolConverter.toBoolean( cXML['option'].deeplink );				App.LOG_ENABLE = BoolConverter.toBoolean( cXML['option'].log );				App.PERFORMANCE_MONITOR_ENABLE = BoolConverter.toBoolean( cXML['option'].performance_monitor );				// persist the configuration as XML if option is set:				if ( BoolConverter.toBoolean( cXML.@persist ) ) {					Logger.$.info( _this, "	... - Persisting Raw '" + App.CONF_URI + "' in App.db['config'] (set via '" + App.CONF_URI + "') ... " );					App.db['config'] = cXML;				}			} catch (er : TypeError) {				Logger.$.error( _this, "!!! - loadConfig: XML parser failed (probably malformed) => " + er.message );			}			// attempt to intialize the API layer based on the configuration			try {				// parse & load the crossdomain uri:				if( App.CROSSDOMAIN_BOOTLOAD ) {					var xDom : String = (!StringUtil.beginsWith( App.CROSSDOMAIN_URI, '/' ) && !StringUtil.beginsWith( App.CROSSDOMAIN_URI, 'http' )) ? (App.PATH + App.CROSSDOMAIN_URI) : App.CROSSDOMAIN_URI;					Logger.$.info( _this, "	... - Loading Crossdomain Policy File (" + xDom + ") ... " );					Security.loadPolicyFile( xDom );				} else {					Logger.$.notice( _this, "	... - Skipping: 'Crossdomain Policy' (set via '" + App.CONF_URI + "'): moving on ... " );				}									// initialize context menu management:				if( App.MANAGED_MENU ) {						ContextMenuManager.getInstance( );									}									// initialize urchin tracking:				if( App.TRACK_ENABLE ) {					Logger.$.info( _this, " - Urchin Tracker Initialized ..." );					Urchin.base = App.APP_NAME;					Urchin.track( "home" );				}				// initialize deeplinking:				if( App.DEEPLINK_ENABLE ) {					Logger.$.info( _this, " - Deeplinking Initialized ..." );					if(!BrowserAddress.anchor) {						//BrowserAddress.title = ":: " + App.APP_NAME + " :: Home";						BrowserAddress.anchor = "home/";					}				}									// configure logger:				if ( !App.LOG_ENABLE ) {					Logger.$.warn( _this, "!!! - Logger disabled via '" + App.CONF_URI + "': Goodbye World!" );					Logger.$.enabled = App.LOG_ENABLE;				} else {					var level : String = (LogTarget.resolveTarget( cXML['option'].log.@target ) < LogTarget.ALL) ? "warn" : "status";					Logger.$[level]( _this, " - Logger output target set via '" + App.CONF_URI + "': " + cXML['option'].log.@target );										}				Logger.$.outputMode = LogTarget.resolveTarget( cXML['option'].log.@target, true );				// configure performance monitor:				if( App.PERFORMANCE_MONITOR_ENABLE ) {					new PerformanceMonitor( Canvas.stage );				}				// dispatch the APP_CONFIG event & continue bootstrap ...				dispatchEvent( new BootstrapEvent( BootstrapEvent.APP_CONFIG ) );				trace("run");				run( );				trace("end run");					} catch (e : Error) {				Logger.$.error( _this, "!!! - loadConfig: Config initialization failed (likely inaccessible external) => " + e.message );			}						trace("App.DATA_BOOTLOAD=="+App.DATA_BOOTLOAD);		}	}}