/** * sekati.managers.KeyManager * @version 1.0.2 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.managers {	import flash.display.DisplayObject;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.utils.Proxy;	import flash.utils.flash_proxy;	import sekati.data.KeyCode;	import sekati.display.Canvas;	import sekati.utils.ArrayUtil;		/**	 * KeyManager provides an interface for the centralized catching and dispatching of 	 * KeyEvents or via direct coupling of Keyboard events to actions.	 * 	 * @example <listing version="3.0">	 * // create a response relationship between a key and method:	 * KeyManager.$.addKeyListener( handler : Function, Keyboard.UP );	 * 	 * // create a response between a key combo and a method:	 * KeyManager.$.addKeyListener( handler : Function, Keyboard.CONTROL, Keyboard.LEFT );	 * </listing>	 * 	 * @see http://livedocs.adobe.com/flex/3/langref/flash/ui/Keyboard.html	 */	public class KeyManager extends Proxy {		protected static var _instance : KeyManager;		protected var _enabled : Boolean;		protected var _keyPress : Array;		protected var _keyCombo : Array;		/**		 * KeyManager Singleton Constructor		 * @param $ SingletonEnforcer - internal to the AS file; the param prevents external instantiation without error.		 */		public function KeyManager( $ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "KeyManager is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );				}			// initialize the key manager			_keyPress = new Array( );			_keyCombo = new Array( );			_enabled = true;			Canvas.stage.addEventListener( KeyboardEvent.KEY_DOWN, keyPress );			Canvas.stage.addEventListener( KeyboardEvent.KEY_UP, keyRelease );			Canvas.stage.addEventListener( Event.DEACTIVATE, clearKeys );		}		/**		 * Singleton Accessor		 * @return KeyManager		 */		public static function getInstance() : KeyManager {			if( _instance == null ) _instance = new KeyManager( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return KeyManager		 */		public static function get $() : KeyManager {			return KeyManager.getInstance( );			}		/**		 * Proxy <code>Keyboard</code> and <code>KeyCode</code> constants for easy reference.		 */		flash_proxy override function getProperty(name : *) : * {			if(name in Keyboard) {				return Keyboard[name];			} else if (name in KeyCode) {				return KeyCode[name];			} else {				return  -1;			}		}		/**		 * Indicates whether the KeyManager is enabled (<code>true</code>) or disabled (<code>false</code>).		 */		public function get enabled() : Boolean {			return _enabled;		}		/**		 * @private		 */		public function set enabled(b : Boolean) : void {			_enabled = b;		}				// EVENT HANDLERS 				/**		 * Add the key to the <code>keyMap</code>.		 */		protected function keyPress(e : KeyboardEvent = null) : void {			if(_keyPress.indexOf( e.keyCode ) == -1) {				//trace( "adding keyCode: " + e.keyCode + " | charCode: " + e.charCode );				_keyPress.push( e.keyCode );			}			keyCheck( );		}		/**		 * Remove the key from the <code>keyMap</code>.		 */		protected function keyRelease(e : KeyboardEvent = null) : void {			if(_keyPress.indexOf( e.keyCode ) != -1) {				//trace( "removing keyCode: " + e.keyCode + " | charCode: " + e.charCode );				_keyPress.splice( _keyPress.indexOf( e.keyCode ), 1 );				//trace( "cleaned array: " + _keyPress );			}			if (!Canvas.stage.hasEventListener( KeyboardEvent.KEY_DOWN )) {				trace( "re-adding KEY_DOWN listener!" );				Canvas.stage.addEventListener( KeyboardEvent.KEY_DOWN, keyPress );				}		}		/**		 * Clear the keyMap.		 */		protected function clearKeys(e : Event = null) : void {			_keyPress = new Array( );		}		/**		 * Check the key press to see if it matches our handlers.		 */		protected function keyCheck() : void {			if(!enabled) {				return; 			}			for (var i : int = 0; i < _keyCombo.length ; i++) {				if(ArrayUtil.compare( _keyCombo[i].keys, _keyPress )) {					// prevent repeats of this combo					if(!_keyCombo[i].repeat) {						trace( "removing KEY_DOWN listener" );						Canvas.stage.removeEventListener( KeyboardEvent.KEY_DOWN, keyPress );					}					//trace( "@@@ its a match!" );					_keyCombo[i].handler( );				}			}		}		// HELPERS				/**		 * Reset the Key Combo and Map.		 */		public function reset() : void {			clearKeys( );			_keyCombo = new Array( );		}		/**		 * Destroy the KeyManager instance.		 */		public function destroy() : void {			Canvas.stage.removeEventListener( KeyboardEvent.KEY_DOWN, keyPress );			Canvas.stage.removeEventListener( KeyboardEvent.KEY_UP, keyRelease );			Canvas.stage.removeEventListener( Event.DEACTIVATE, clearKeys );			_enabled = false;			_keyPress = null;				_keyCombo = null;			_instance = null;					}		/**		 * Returns true or false if the key represented by the		 * keyCode passed is being pressed		 */		public function isDown(keyCode : uint) : Boolean {			return Boolean( keyCode in _keyPress );		}				// TRIGGERS				/**		 * Add a key or key combo.		 * @param handler 	the function to be fired upon a complete key match.		 * @param keys 		array of <code>keyCodes</code> (uint's) which will trigger the handler.		 * @example <listing version="3.0">		 * KeyManager.$.addKeyListener( runProgram, Keyboard.CONTROL, Keyboard.ENTER );		 * KeyManager.$.addKeyListener( copyText, Keyboard.CONTROL, Keyboard.C ); 		 * </listing>		 */		public function addKeyListener(handler : Function, repeat : Boolean, ...keys) : void {			if(!isNaN( ArrayUtil.locatePropValIndex( _keyCombo, 'handler', handler ) )) {				//trace( "adding key listener" );				_keyCombo.push( { handler:handler, repeat:repeat, keys:keys.sort( Array.NUMERIC )} );			}		}		/**		 * Remove a key or key combo.		 * @param handler 	the function to be fired upon a complete key match.		 * @example <listing version="3.0">		 * KeyManager.$.removeKeyListener( runProgram );		 * KeyManager.$.removeKeyListener( copyText ); 		 * </listing>		 */		public function removeKeyListener(handler : Function) : void {			//trace( "removing key listener" );			_keyCombo = _keyCombo.splice( ArrayUtil.locatePropValIndex( _keyCombo, 'handler', handler ), 1 );				}	}}/** * Internal class is accessible only to this AS file and is used  * as a constructor param to enforce proper Singleton behavior. */internal class SingletonEnforcer {}		