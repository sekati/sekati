/** * sekati.managers.FontManager * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.managers {	import flash.text.TextFormat;		import flash.text.TextField;		import sekati.log.Logger;		import sekati.core.Configuration;		import flash.events.EventDispatcher;	import flash.utils.Dictionary;			/**	 * FontManager provides <code>TextFormat</code> or <code>StyleSheet</code> support to <code>TextFields</code>.	 */	public class FontManager extends EventDispatcher {		/*** @private */		private static var _instance : FontManager;		/*** @private */				private var _library : Dictionary;		/**		 * FontManager Singleton Constructor		 * @param $ SingletonEnforcer - internal to the AS file; the param prevents external instantiation without error.		 */		public function FontManager( $ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "sekati.managers.FontManager is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );				}			if(Configuration.FONT_BOOTLOAD) {				initLibrary( );			} else {				Logger.$.error( this, "A font library was not loaded during the Bootstrap sequence; I therefore have nothing to manage: goodbye!" );			}		}		/**		 * Initialize and index the runtime font library loaded during the <code>Bootstrap</code> sequence.		 */		private function initLibrary() : void {			_library = new Dictionary( true );			for each (var i : * in Configuration.font) {				if(i is TextField) {					var tf : TextField = i as TextField;					Logger.$.info( this, "FontManager.library added: '" + tf.name + "'." );					Configuration.font[tf.name] = tf.getTextFormat( );				}			}					}		/**		 * Apply a format from the library to a TextField.		 * 		 * <listing version="3.0">		 * FontManager.$.applyFormat( myTf, 'HN35Thin' );		 * FontManager.$.applyFormat( myTf, 'HN35Thin', 'Hello Word!", 'left' );		 * </listing>		 */		public function applyFormat(tf : TextField, formatName : String, str : String = null, autosize : String = null) : void {			var format : TextFormat = library[formatName];			if(!format) { 				Logger.$.error( this, "Font Format '" + formatName + "' Not Found!" );				return;			}			tf.setTextFormat( format );			if(str != null ) {				tf.htmlText = str;			}			if(autosize != null) {				tf.autoSize = autosize;			}		}		/**		 * Create a TextField with formatting and options.		 */		public function createField(formatName : String, str : String = '', autosize : String = 'left', width : uint = 300, height : uint = 30) : TextField {			var tf : TextField = new TextField( );			tf.width = width;			tf.height = height;			tf.autoSize = autosize;			tf.htmlText = str;			applyFormat( tf, formatName );			return tf;		}				/**		 * Singleton Accessor		 * @return FontManager		 */		public static function getInstance() : FontManager {			if( _instance == null ) _instance = new FontManager( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return FontManager		 */		public static function get $() : FontManager {			return FontManager.getInstance( );			}		/**		 * The library of <code>TextFormat</code>'s index from the library SWF.		 */		public function get library() : Dictionary {			return _library;		}	}}/** * Internal class is accessible only to this AS file and is used  * as a constructor param to enforce proper Singleton behavior. */internal class SingletonEnforcer {}		