/** * sekati.media.F4A * @version 1.1.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.media {	import sekati.events.FramePulse;	import sekati.events.MediaEvent;	import sekati.log.Logger;	import sekati.validators.FileTypeValidator;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundLoaderContext;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.utils.Timer;		/**	 * F4A provides a common audio media control object for MP3, MP4, F4A, et. al.	 * @see sekati.load.SoundLoader	 * @see http://livedocs.adobe.com/flex/3/langref/flash/media/SoundChannel.html	 */	public class F4A extends EventDispatcher {		protected var _sound : Sound;		protected var _channel : SoundChannel;		protected var _transform : SoundTransform;		protected var _context : SoundLoaderContext;		protected var _position : Number;		protected var positionTimer : Timer;		//		protected var _paused : Boolean;		protected var _started : Boolean;		//		protected var _url : URLRequest;		protected var _loop : uint;		/**		 * F4A Constructor		 * @param volume 	of the sound (0 - 1)		 * @param pan 		of the sound (0 = balanced, -1 = left, 1 = right);		 */		public function F4A(volume : Number = 1, pan : Number = 0) {			super( );			_sound = new Sound( );			_transform = new SoundTransform( volume, pan );			_paused = false;			_started = false;		}		/**		 * Load the audio and begin playback.		 * @param url 		of the audio file.		 * @param buffer 	seconds of buffer to maintain.		 * @param loop 		number of times to loop the <code>Sound</code> playback.		 */		public function load(url : String, buffer : uint = 1, loop : uint = 0) : void {			if(!FileTypeValidator.isAudio( url )) {				throw new ArgumentError( "F4A.load() Argument Error: '" + url + "' is not a valid audio file type according to FileTypeValidator.IS_AUDIO." );			}			_url = new URLRequest( url );			_loop = loop;			_context = new SoundLoaderContext( (buffer * 1000), false );			// events			_sound.addEventListener( Event.COMPLETE, completeHandler, false, 0, true );			_sound.addEventListener( Event.ID3, id3Handler, false, 0, true );			_sound.addEventListener( IOErrorEvent.IO_ERROR, errorHandler, false, 0, true );			_sound.addEventListener( ProgressEvent.PROGRESS, progressHandler, false, 0, true );			_sound.load( _url, _context );			_channel = _sound.play( );			_channel.soundTransform = _transform;						_channel.addEventListener( Event.SOUND_COMPLETE, soundCompleteHandler, false, 0, true );			FramePulse.$.addFrameListener( audio_onProgress );			_started = true;		}		public function play() : void {		}		public function stop() : void {		}		public function pause() : void {		}		public function resume() : void {		}		/**		 * Stop playback and cleanup after self.		 */		public function destroy() : void {			stop( );			FramePulse.$.removeFrameListener( audio_onProgress );			_sound.removeEventListener( Event.COMPLETE, completeHandler );			_sound.removeEventListener( Event.ID3, id3Handler );			_sound.removeEventListener( IOErrorEvent.IO_ERROR, errorHandler );			_sound.removeEventListener( ProgressEvent.PROGRESS, progressHandler );				_channel.removeEventListener( Event.SOUND_COMPLETE, soundCompleteHandler );				}		private function audio_onProgress(e : Event) : void {			trace( "audio_onProgress: " + _channel.position.toFixed( 2 ) + " / " + _sound.length.toFixed( 2 ) );		}		private function soundCompleteHandler(e : Event) : void {			trace( "soundCompleteHandler: " + e );			FramePulse.$.removeFrameListener( audio_onProgress );		}		private function id3Handler(e : Event) : void {			trace( "id3Handler: " + e );		}		private function completeHandler(e : Event) : void {			trace( "completeHandler: " + e );		}		private function progressHandler(e : ProgressEvent) : void {			_position = _channel.position;			//dispatchEvent( new MediaEvent( MediaEvent.PROGRESS, null, getPercentLoaded( ), getPercentPlayed( ) ) );			//trace( "position: " + _channel.position + " | length: " + _sound.length );						//trace( "progressHandler: " + e );		}		private function errorHandler(e : IOErrorEvent) : void {			Logger.$.error( this, "IOError: " + e.text );			dispatchEvent( new MediaEvent( MediaEvent.STREAM_NOT_FOUND ) );		}		/**		 * Return the percent loaded (1 based %).		 */		public function getPercentLoaded() : Number {			return ( _sound.bytesLoaded / _sound.bytesTotal );		}		/**		 * Return the percent played (1 based %). 		 */		public function getPercentPlayed() : Number {			return (_channel.position / _sound.length);		}		/**		 * Set the audio volume.		 * @param volume 0-1		 */		public function setVolume(volume : Number) : void {			_transform.volume = volume;			_channel.soundTransform = _transform;			}		/**		 * Set the audio pan.		 * @param pan of the sound (0 = balanced, -1 = left, 1 = right);		 */		public function setPan(pan : Number) : void {			_transform.pan = pan;			_channel.soundTransform = _transform;			}		/**		 * The <code>Sound</code>.		 */		public function get sound() : Sound {			return _sound;		}		/**		 * The <code>SoundChannel</code>.		 */				public function get channel() : SoundChannel {			return _channel;		}		/**		 * The <code>SoundTransform</code>.		 */		public function get transform() : SoundTransform {			return _transform;		}		/**		 * The <code>Sound</code> position.		 */		public function get position() : Number {			return _position;		}	}}