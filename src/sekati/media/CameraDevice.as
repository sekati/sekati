/** * sekati.media.CameraDevice * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.media {	import sekati.display.CoreSprite;	import sekati.events.DeviceEvent;	import sekati.log.Logger;		import flash.events.ActivityEvent;	import flash.events.StatusEvent;	import flash.media.Camera;	import flash.media.Video;	import flash.system.Security;	import flash.system.SecurityPanel;			/**	 * CameraDevice provides a <code>Camera</code> control <code>DisplayObject</code> to the API.	 * @see sekati.events.DeviceEvent	 * @see http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/media/Camera.html	 */	public class CameraDevice extends CoreSprite {		protected var _width : int;		protected var _height : int;		protected var _fps : int;		protected var _motionLevel : int;		protected var _timeout : int;		protected var _camera : Camera;		protected var _video : Video;		/**		 * CameraDevice Constructor		 */		public function CameraDevice(width : int = 320, height : int = 240, fps : int = 15, motionLevel : int = 0, timeout : int = 2000) {			super( );			_width = width;			_height = height;			_fps = fps;			_motionLevel = motionLevel;			_timeout = timeout;			aquireCamera( );		}		/**		 * Initialize the <code>Camera</code> if possible.		 */		protected function aquireCamera() : void {			_camera = Camera.getCamera( );			if(_camera != null) {				connectCamera( );			} else {				promptCamera( );			}		}		/**		 * Connect the <code>Camera</code> to a <code>Video</code> stream.		 */		protected function connectCamera() : void {			_camera.addEventListener( StatusEvent.STATUS, statusHandler, false, 0, true );			_camera.addEventListener( ActivityEvent.ACTIVITY, activityHandler, false, 0, true );			_camera.setMode( _width, _height, _fps, true );			_camera.setMotionLevel( _motionLevel, _timeout );			_video = new Video( _camera.width, _camera.height );			_video.attachCamera( _camera );			addChild( _video );		}		/**		 * Graceful degradation for the lack of camera.		 */		protected function promptCamera() : void {			Security.showSettings( SecurityPanel.CAMERA );			Logger.$.warn( this, "Could not aquire a Camera." );		}		/**		 * Responds to camera activity.		 */		protected function activityHandler(e : ActivityEvent) : void {			Logger.$.info( this, "activating: " + e.activating );			dispatchEvent( new DeviceEvent( DeviceEvent.CAMERA_ACTIVITY, e.activating ) );		}		/**		 * Respond to camera status.		 */		protected function statusHandler(e : StatusEvent) : void {			Logger.$.notice( this, "status: " + e.code );			switch (e.code) {				case "Camera.Muted":					Logger.$.warn( this, "User clicked Deny." );					dispatchEvent( new DeviceEvent( DeviceEvent.CAMERA_MUTE ) );					break;				case "Camera.Unmuted":					Logger.$.notice( this, "User clicked Accept." );					dispatchEvent( new DeviceEvent( DeviceEvent.CAMERA_UNMUTE ) );					break;			}		}				/**		 * @inheritDoc		 */		override public function destroy() : void {			_camera.removeEventListener( StatusEvent.STATUS, statusHandler );			_camera.removeEventListener( ActivityEvent.ACTIVITY, activityHandler );			_video.clear( );			removeChild( _video );			super.destroy( );		}		/**		 * The attached camera driver instance.		 */		public function get camera() : Camera {			return _camera;		}		/**		 * The attached camera driver's <code>Video</code> instance.		 */		public function get video() : Video {			return _video;		}	}}