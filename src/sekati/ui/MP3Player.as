/** * sekati.ui.MP3Player * @version 1.3.0 * @author jason m horwitz & steve baughman | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.ui {	import sekati.events.MediaEvent;	import sekati.math.MathBase;	import sekati.media.MP3;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;		/**	 * MP3Player provides playback control interface logic to be used with sekati.media.MP3.	 * 	 * <p>To implement pass references to UI controller instances to the <code>MP3Player</code> 	 * constructor & instantiate the MP3Player instance.</p>	 * 	 * @example <listing version="3.0">	 * var player : MP3Player = new MP3Player( playBtn, progressBar, bufferBar, gutterBar, volumeBtn );	 * player.x = player.y = 10;	 * addChild( player );	 * player.init( 'path/to/my.mp3' );	 * </listing>	 * 	 * @see sekati.media.MP3	 * @see sekati.events.MediaEvent	 */	public class MP3Player extends EventDispatcher {		protected var _audio : MP3;		protected var _isDrag : Boolean;		protected var _isSeeking : Boolean;		protected var _wasPlaying : Boolean;		protected var _playBtn : MovieClip;		protected var _progressBar : Sprite;		protected var _bufferBar : Sprite;		protected var _gutterBar : Sprite;		protected var _volumeBtn : Sprite;		protected var _id3 : Object;		protected var isBufferPaused : Boolean;		/**		 * MP3Player Constructor		 */		public function MP3Player(playBtn : MovieClip, progressBar : Sprite, bufferBar : Sprite, gutterBar : Sprite, volumeBtn : Sprite) {			super( );			_playBtn = playBtn;			_progressBar = progressBar;			_bufferBar = bufferBar;			_gutterBar = gutterBar;			_volumeBtn = volumeBtn;			_isDrag = false;			_isSeeking = false;			_wasPlaying = false;									_progressBar.mouseEnabled = false;			_progressBar.scaleX = 0;			_bufferBar.scaleX = 0;			_playBtn.buttonMode = true;			_volumeBtn.buttonMode = true;			_bufferBar.buttonMode = true;						_playBtn.addEventListener( MouseEvent.CLICK, playBtnClick, false, 0, true );			_volumeBtn.addEventListener( MouseEvent.MOUSE_DOWN, volumeBtnDown, false, 0, true );			_volumeBtn.addEventListener( MouseEvent.MOUSE_UP, volumeBtnUp, false, 0, true );			_volumeBtn.addEventListener( MouseEvent.MOUSE_MOVE, volumeBtnMove, false, 0, true );			_bufferBar.addEventListener( MouseEvent.MOUSE_DOWN, bufferBarDown, false, 0, true );			_bufferBar.addEventListener( MouseEvent.MOUSE_UP, bufferBarUp, false, 0, true );			_bufferBar.addEventListener( MouseEvent.MOUSE_MOVE, bufferBarMove, false, 0, true );				}		// CORE CONTROLS				/**		 * load audio and initialize MP3Player UI and MP3.		 * @param url		of mp3 file.		 * @param volume 	of the mp3 audio.		 * @param pan 		of the mp3 audio.		 */		public function init(url : String, volume : Number = 1, pan : Number = 0) : void {			remove( );			_audio = new MP3( );			_playBtn.gotoAndStop( 1 );						_audio.addEventListener( MediaEvent.PROGRESS, audioProgressHandler, false, 0, true );			_audio.addEventListener( MediaEvent.START, audioStatusHandler, false, 0, true );			_audio.addEventListener( MediaEvent.STOP, audioStatusHandler, false, 0, true );			_audio.addEventListener( MediaEvent.STREAM_NOT_FOUND, audioStatusHandler, false, 0, true );			_audio.addEventListener( MediaEvent.REBUFFER, audioStatusHandler, false, 0, true );			_audio.addEventListener( MediaEvent.REBUFFER_COMPLETE, audioStatusHandler, false, 0, true );			_audio.addEventListener( MediaEvent.METADATA, audioStatusHandler, false, 0, true );			_audio.addEventListener( MediaEvent.ID3, audioID3Handler, false, 0, true );						_audio.load( url );			_audio.play( );						_audio.volume = volume;			_audio.pan = pan;					}		/**		 * Remove the movie from player.		 */		public function remove() : void {			if (_audio) {				_audio.removeEventListener( MediaEvent.PROGRESS, audioProgressHandler );				_audio.removeEventListener( MediaEvent.START, audioStatusHandler );				_audio.removeEventListener( MediaEvent.STOP, audioStatusHandler );				_audio.removeEventListener( MediaEvent.STREAM_NOT_FOUND, audioStatusHandler );				_audio.removeEventListener( MediaEvent.REBUFFER, audioStatusHandler );				_audio.removeEventListener( MediaEvent.REBUFFER_COMPLETE, audioStatusHandler );				_audio.removeEventListener( MediaEvent.METADATA, audioStatusHandler );				_audio.removeEventListener( MediaEvent.ID3, audioID3Handler );								_audio.destroy( );				_audio = null;				reset( );			}					}		/**		 * Reset the interface.		 */		public function reset() : void {			_bufferBar.scaleX = 0;			_progressBar.scaleX = 0;			_playBtn.gotoAndStop( 2 );		}		/**		 * Pause audio playback		 */		public function pause() : void {			if (_audio) {				_playBtn.gotoAndStop( 2 );				_audio.pause( );			}		}		/**		 * Resume audio playback		 */		public function resume() : void {			if (_audio) {				_playBtn.gotoAndStop( 1 );				_audio.resume( );			}		}		/**		 * @inheritDoc		 */		public function destroy() : void {			_audio.destroy( );			_playBtn.removeEventListener( MouseEvent.CLICK, playBtnClick );			_volumeBtn.removeEventListener( MouseEvent.MOUSE_DOWN, volumeBtnDown );			_volumeBtn.removeEventListener( MouseEvent.MOUSE_UP, volumeBtnUp );			_volumeBtn.removeEventListener( MouseEvent.MOUSE_MOVE, volumeBtnMove );			_bufferBar.removeEventListener( MouseEvent.MOUSE_DOWN, bufferBarDown );			_bufferBar.removeEventListener( MouseEvent.MOUSE_UP, bufferBarUp );			_bufferBar.removeEventListener( MouseEvent.MOUSE_MOVE, bufferBarMove );					}		// PLAYER DRIVERS				/**		 * Pause audio in memory and track state.		 */		protected function pauseMemory() : void {			_wasPlaying = _audio.isPaused;			_audio.pause( );		}		/**		 * Resume audio from member and release state.		 */		protected function resumeMemory() : void {			if (!_wasPlaying) {				_audio.resume( );			}			_wasPlaying = false;		}		/**		 * Core audio volume driver.		 */		protected function setVolumeControl(p : Number = NaN) : void {			var ov : Number = (!isNaN( p )) ? p : MathBase.clamp( ( _volumeBtn.mouseX / _volumeBtn.width ), 0, 1 );			var v : Number = MathBase.clamp( ov, 0, 1 );			_volumeBtn['vbar'].scaleX = v;			_audio.volume = v;			//trace( "Volume: " + v );		}		/**		 * Use guttBar to prevent seek offset inaccuracy while still buffering.		 */		protected function seekUI() : void {			if (_isSeeking) {				var percent : Number = MathBase.clamp( ((_gutterBar.mouseX - 2) / (_gutterBar.width - 2)), .01, 1 );				_progressBar.scaleX = percent;				trace( "@seekUI: " + percent + "% | bufferPercent: " + _bufferBar.scaleX + "% | bufferBar.mouseX: " + _bufferBar.mouseX + " | buffBar.width: " + _bufferBar.width );			}		}				// MOVIE HANDLERS					/**		 * ID3 Handler.		 */		protected function audioID3Handler(e : MediaEvent) : void {			_id3 = e.id3;		}		/**		 * Handle <code>FLV</code> movie progress events. 		 */		protected function audioProgressHandler(e : MediaEvent) : void {			//trace( "movie_onProgress - loaded:" + e.loaded + " played:" + e.played );			var lp : Number = MathBase.clamp( e.loaded, 0, 1 );			var cp : Number = MathBase.clamp( e.played, 0, 1 );			_bufferBar.scaleX = lp;			if (!_isSeeking) {				_progressBar.scaleX = cp;			} else {				_audio.seekToPercent( _progressBar.scaleX );			}					}		/**		 * Handle <code>FLV</code> movie status events.		 * 		 * <p>It is best to extend and override this class method to implement your own switch/case code.</p>		 */		protected function audioStatusHandler(e : MediaEvent) : void {			switch (e.code) {				case MediaEvent.BUFFER_EMPTY :					trace( "MP3Player-> movieEvent: bufferEmpty" );					break;				case MediaEvent.BUFFER_FULL :					trace( "MP3Player-> movieEvent: bufferFull" );					break;				case MediaEvent.BUFFER_FLUSH :					trace( "MP3Player-> movieEvent: bufferFlush" );					break;				case MediaEvent.START :					trace( "MP3Player-> movieEvent: start" );					break;				case MediaEvent.STOP :					trace( "MP3Player-> movieEvent: stop" );					//Logger.$.notice( this, "MP3 Completed Playback." );					if(_audio.isPlaying) playBtnClick( );					break;				case MediaEvent.STREAM_NOT_FOUND :					trace( "MP3Player-> movieEvent: play_streamNotFound" );					break;				case MediaEvent.SEEK_INVALID_TIME :					trace( "MP3Player-> movieEvent: seek_invalidTime" );					_audio.rewind( );					break;				case MediaEvent.SEEK_NOTIFY:					trace( "MP3Player-> movieEvent: seek_notify" );					break;				case MediaEvent.REBUFFER:					trace( "MP3Player-> movieEvent: rebuffer" );					// we have unique events for these					break;				case MediaEvent.REBUFFER_COMPLETE:					trace( "MP3Player-> movieEvent: rebufferComplete" );					// we have unique events for these					break;					case MediaEvent.METADATA:					trace( "MP3Player-> movieEvent: metaData" );					break;				case MediaEvent.CUE_POINT:					trace( "MP3Player-> movieEvent: cuePoint" );					if(!_isDrag || !_isSeeking) {						dispatchEvent( new MediaEvent( MediaEvent.CUE_POINT_DISPLAY, null, NaN, NaN, null, e.cuePointData ) );					}					break;														default :					trace( "MP3Player-> movieEvent: unrecognized onStatus value: " + e.code + " :: " + e.type );			}					}		// EVENT HANDLERS				/**		 * Toggle the framed <code>_playBtn</code> icon and pause/resume playback.		 */		protected function playBtnClick(e : MouseEvent = null) : void {			if (_audio) {				if (_playBtn.currentFrame == 1) {					_playBtn.gotoAndStop( 2 );					_audio.pause( );				} else {					_playBtn.gotoAndStop( 1 );					_audio.resume( );				}			}					}		/**		 * <code>_buffBar</code> pressed: being seeking.		 */		protected function bufferBarDown(e : MouseEvent) : void {			_isSeeking = true;			seekUI( );			pauseMemory( );			_bufferBar.stage.addEventListener( MouseEvent.MOUSE_UP, bufferBarUp, false, 0, true );			}		/**		 * <code>_buffBar</code> released: stop seeking.		 */		protected function bufferBarUp(e : MouseEvent) : void {			_isSeeking = false;			_bufferBar.stage.removeEventListener( MouseEvent.MOUSE_UP, bufferBarUp );					}		/**		 * <code>_buffBar</code> scrubbing: seek.		 */		protected function bufferBarMove(e : MouseEvent) : void {			seekUI( );		}		/**		 * <code>_volBtn</code> pressed: begin volume control.		 */		protected function volumeBtnDown(e : MouseEvent) : void {			_isDrag = true;			setVolumeControl( );			_volumeBtn.stage.addEventListener( MouseEvent.MOUSE_UP, volumeBtnUp, false, 0, true );					}		/**		 * <code>_volBtn</code> released: end volume control.		 */		protected function volumeBtnUp(e : MouseEvent) : void {			_isDrag = false;			_volumeBtn.stage.removeEventListener( MouseEvent.MOUSE_UP, volumeBtnUp );				}		/**		 * <code>_volBtn</code> scrubbing: change volume.		 */		protected function volumeBtnMove(e : MouseEvent) : void {			if (_isDrag) {				setVolumeControl( );			}					}		/**		 * Returns reference to current ID3 data object.		 */		public function get currentID3() : Object {			return _id3;		}	}}