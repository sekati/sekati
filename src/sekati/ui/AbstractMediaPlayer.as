/** * sekati.ui.AbstractMediaPlayer * @version 1.4.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.ui {	import sekati.display.LiquidSprite;	import sekati.events.StageEvent;	import sekati.math.MathBase;	import sekati.media.IProgressiveMedia;	import sekati.utils.TypeEnforcer;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;			/**	 * AbstractMediaPlayer provides abstract player control logic for audio/video players and the likes.	 */	public class AbstractMediaPlayer extends LiquidSprite {		protected var _media : IProgressiveMedia;		protected var _isDrag : Boolean;		protected var _isSeeking : Boolean;		protected var _wasPlaying : Boolean;		protected var _playBtn : MovieClip;		protected var _progressBar : Sprite;		protected var _bufferBar : Sprite;		protected var _gutterBar : Sprite;		protected var _volumeBtn : Sprite;		protected var isBufferPaused : Boolean;		/**		 * AbstractMediaPlayer Constructor		 */		public function AbstractMediaPlayer(playBtn : MovieClip, progressBar : Sprite, bufferBar : Sprite, gutterBar : Sprite, volumeBtn : Sprite) {			super( );						TypeEnforcer.enforceAbstract( this, AbstractMediaPlayer );						_playBtn = playBtn;			_progressBar = progressBar;			_bufferBar = bufferBar;			_gutterBar = gutterBar;			_volumeBtn = volumeBtn;			_isDrag = false;			_isSeeking = false;			_wasPlaying = false;						_progressBar.mouseEnabled = false;			_bufferBar.width = 0;			_progressBar.width = 0;			_playBtn.buttonMode = true;			_volumeBtn.buttonMode = true;			_bufferBar.buttonMode = true;							_playBtn.addEventListener( MouseEvent.CLICK, playBtnClick, false, 0, true );			_volumeBtn.addEventListener( MouseEvent.MOUSE_DOWN, volumeBtnDown, false, 0, true );			_volumeBtn.addEventListener( MouseEvent.MOUSE_UP, volumeBtnUp, false, 0, true );			_volumeBtn.addEventListener( MouseEvent.MOUSE_MOVE, volumeBtnMove, false, 0, true );			_bufferBar.addEventListener( MouseEvent.MOUSE_DOWN, bufferBarDown, false, 0, true );			_bufferBar.addEventListener( MouseEvent.MOUSE_UP, bufferBarUp, false, 0, true );			_bufferBar.addEventListener( MouseEvent.MOUSE_MOVE, bufferBarMove, false, 0, true );							}		// CORE CONTROLS				/**		 * Load and initialize the player UI and <code>IProgressiveMedia</code>.		 * @param url 		of <code>IProgressiveMedia</code> to be played.		 * @param buffer	in seconds.		 * @param args 		extra init arguments for subclasses.		 */		public function init(url : String, buffer : uint = 2, ...args) : void {			remove( );			setPauseIcon( );			addMedia( );			addMediaListeners( );			_media.load( url, buffer );			_media.play( );		}		/**		 * Remove the <code>IProgressiveMedia</code> from player.		 */		public function remove() : void {			if (_media) {				removeMediaListeners( );				_media.destroy( );				_media = null;				reset( );			}					}		/**		 * Reset the interface.		 */		public function reset() : void {			_bufferBar.width = 0;			_progressBar.width = 0;			setPlayIcon( );			}		/**		 * Pause playback		 */		public function pause() : void {			if (_media) {				setPlayIcon( );				_media.pause( );			}		}		/**		 * Resume playback		 */		public function resume() : void {			if (_media) {				setPlayIcon( );				_media.resume( );			}		}		/**		 * @inheritDoc		 */		override public function destroy() : void {			_playBtn.removeEventListener( MouseEvent.CLICK, playBtnClick );			_volumeBtn.removeEventListener( MouseEvent.MOUSE_DOWN, volumeBtnDown );			_volumeBtn.removeEventListener( MouseEvent.MOUSE_UP, volumeBtnUp );			_volumeBtn.removeEventListener( MouseEvent.MOUSE_MOVE, volumeBtnMove );			_bufferBar.removeEventListener( MouseEvent.MOUSE_DOWN, bufferBarDown );			_bufferBar.removeEventListener( MouseEvent.MOUSE_UP, bufferBarUp );			_bufferBar.removeEventListener( MouseEvent.MOUSE_MOVE, bufferBarMove );			removeMediaListeners( );			_media.destroy( );			super.destroy( );		}			/**		 * @inheritDoc		 */		override protected function resize(e : StageEvent = null) : void {			super.resize( e );		}			// IProgressiveMedia STUBS				/**		 * Stub Function for adding <code>IProgressiveMedia</code>.		 */		protected function addMedia() : void {		}		/**		 * Stub Function for adding <code>IProgressiveMedia</code> listeners.		 */		protected function addMediaListeners() : void {		}			/**		 * Stub Function for removing <code>IProgressiveMedia</code> listeners.		 */		protected function removeMediaListeners() : void {		}					// PLAYER DRIVERS				/**		 * Pause video in memory and track state.		 */		protected function pauseMemory() : void {			_wasPlaying = _media.isPaused;			_media.pause( );		}		/**		 * Resume video from member and release state.		 */		protected function resumeMemory() : void {			if (!_wasPlaying) {				_media.resume( );			}			_wasPlaying = false;		}		/**		 * Core video volume driver.		 */		protected function setVolumeControl(p : Number = NaN) : void {			var ov : Number = (!isNaN( p )) ? p : MathBase.clamp( ( _volumeBtn.mouseX / _volumeBtn.width ), 0, 1 );			var v : Number = MathBase.clamp( ov, 0, 1 );			_volumeBtn['vbar'].scaleX = v;			_media.volume = v;			//trace( "Volume: " + v );		}		/**		 * Use guttBar to prevent seek offset inaccuracy while still buffering.		 */		protected function seekUI() : void {			if (_isSeeking) {				var percent : Number = MathBase.clamp( ((_gutterBar.mouseX - 2) / (_gutterBar.width - 2)), .01, 0.99 );								progressBarPercent = percent;				trace( "@seekUI: " + percent + "% | bufferPercent: " + bufferBarPercent + "%" );			}		}			/**		 * Set the <code>_playBtn</code> icon "paused".		 */		protected function setPauseIcon() : void {			_playBtn.gotoAndStop( 'pause' );		}		/**		 * Set the <code>_playBtn</code> icon "played".		 */		protected function setPlayIcon() : void {			_playBtn.gotoAndStop( 'play' );		}											// UI EVENT HANDLERS				/**		 * Toggle the framed <code>_playBtn</code> icon and pause/resume playback.		 */		protected function playBtnClick(e : MouseEvent = null) : void {			if (_media) {				if (_playBtn.currentLabel == "play") {					setPauseIcon( );					_media.pause( );				} else {					setPlayIcon( );					_media.resume( );				}			}					}		/**		 * <code>_bufferBar</code> pressed: being seeking.		 */		protected function bufferBarDown(e : MouseEvent) : void {			_isSeeking = true;			seekUI( );			pauseMemory( );			_bufferBar.stage.addEventListener( MouseEvent.MOUSE_UP, bufferBarUp, false, 0, true );			}		/**		 * <code>_bufferBar</code> released: stop seeking.		 */		protected function bufferBarUp(e : MouseEvent) : void {			_isSeeking = false;			resumeMemory( );			_bufferBar.stage.removeEventListener( MouseEvent.MOUSE_UP, bufferBarUp );					}		/**		 * <code>_bufferBar</code> scrubbing: seek.		 */		protected function bufferBarMove(e : MouseEvent) : void {			seekUI( );		}		/**		 * <code>_volumeBtn</code> pressed: begin volume control.		 */		protected function volumeBtnDown(e : MouseEvent) : void {			_isDrag = true;			setVolumeControl( );			_volumeBtn.stage.addEventListener( MouseEvent.MOUSE_UP, volumeBtnUp, false, 0, true );					}		/**		 * <code>_volumeBtn</code> released: end volume control.		 */		protected function volumeBtnUp(e : MouseEvent) : void {			_isDrag = false;			_volumeBtn.stage.removeEventListener( MouseEvent.MOUSE_UP, volumeBtnUp );				}		/**		 * <code>_volumeBtn</code> scrubbing: change volume.		 */		protected function volumeBtnMove(e : MouseEvent) : void {			if (_isDrag) {				setVolumeControl( );			}					}		/**		 * Buffer bar scale percent (0-1).		 */		public function get bufferBarPercent() : Number {			return _bufferBar.width / _gutterBar.width;		}		/*** @private */		public function set bufferBarPercent(p : Number) : void {			_bufferBar.width = Math.round( _gutterBar.width * MathBase.clamp( p, 0, 1 ) );		}		/**		 * Progress bar scale percent (0-1).		 */		public function get progressBarPercent() : Number {			return _progressBar.width / _gutterBar.width;		}		/*** @private */		public function set progressBarPercent(p : Number) : void {			_progressBar.width = Math.round( _gutterBar.width * MathBase.clamp( p, 0, 1 ) );		}		/**		 * The <code>IProgressiveMedia</code> being played.		 */		public function get media() : IProgressiveMedia {			return _media;		}	}}