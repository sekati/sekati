/** * @version 1.0 * @author David Dahlstroem | hello@daviddahlstroem.com * Copyright (C) 2009 David Dahlstroem. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import sekati.log.Logger;		import sekati.core.Cancelable;	import sekati.load.ByteReference;	import sekati.load.ILoader;		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.media.Sound;	import flash.media.SoundLoaderContext;	import flash.net.URLRequest;			/**	 * SoundLoader provides a standard API loader for loading sound.	 */		public class SoundLoader extends AbstractLoader implements ILoader, Cancelable	{				/**		 * Provides security checks for the SoundLoader class.		 * 		 * @see flash.media.SoundLoaderContext		 */				public var soundLoaderContext:SoundLoaderContext;				private var _sound:Sound;				public function SoundLoader(request:URLRequest)		{			super(request);						reset();		}				/**		 * @inheritDoc		 */				override public function load():void		{			_sound.load(getURLRequest(), soundLoaderContext);		}				/**		 * Cancels the loading process.		 * The <code>reset()</code> method must be called before calling the <code>load()</code> method again.		 */				public function cancel():void		{			try			{				_sound.close();			}			catch(e:Error)			{				Logger.$.warn(this, "SoundLoader has no stream open");			}		}				/**		 * @inheritDoc		 */				override public function clone():Object		{			var			loader:SoundLoader = new SoundLoader(getURLRequest());						loader.soundLoaderContext = soundLoaderContext;						return loader as AbstractLoader;		}				/**		 * @inheritDoc		 */				override public function reset():void		{			if(_sound) destroy();						_sound = new Sound();						_byteReference = new ByteReference(_sound);						setEventListeners(true);		}				/**		 * @inheritDoc		 */				override public function destroy():void		{			cancel();						setEventListeners(false);						_byteReference.destroy();						_byteReference = null;						_sound = null;		}				/**		 * @inheritDoc		 */				override public function get data():*		{			return _sound;		}				private function setEventListeners(add:Boolean):void		{			var method:String = (add) ? "addEventListener" : "removeEventListener";						_sound[method](Event.OPEN, dispatchLoadStartEvent);						_sound[method](Event.COMPLETE, dispatchLoadCompleteEvent);						_sound[method](ProgressEvent.PROGRESS, dispatchLoadProgressEvent);						_sound[method](IOErrorEvent.IO_ERROR, dispatchIOErrorEvent);		}	}}