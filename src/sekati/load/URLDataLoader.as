/** * @version 1.0 * @author David Dahlstroem | hello@daviddahlstroem.com *  * Copyright (C) 2009 David Dahlstroem. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load{	import sekati.core.Cancelable;		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;		/**	 * URLDataLoader provides a standard API loader for loading data from a URL.	 */		public class URLDataLoader extends AbstractLoader implements Loadable, Cancelable 	{				/** @private */		protected var _urlLoader:URLLoader;				/**		 * URLDataLoader Constructor		 * 		 */				public function URLDataLoader(request:URLRequest, loaderName:String = null)		{				super(request, loaderName);						reset();		}				/**		 * Cancels the loading process.		 * The <code>reset()</code> method must be called before calling the <code>load()</code> method again.		 */				public function cancel():void		{			var success:Boolean = true;						try			{				_urlLoader.close();			}			catch(e:Error)			{				success = false;			}						if(success) dispatchLoadCancelEvent();		}				/**		 * @inheritDoc		 */				override public function load():void		{			_urlLoader.load(getURLRequest());		}				/**		 * @inheritDoc		 */				override public function clone():Object		{			var			loader:URLDataLoader = new URLDataLoader(getURLRequest());						loader.dataFormat = dataFormat;						return loader;		}				/**		 * @inheritDoc		 */				override public function reset():void		{			if(_urlLoader) destroy();						_urlLoader = new URLLoader();						_urlLoader.dataFormat = URLLoaderDataFormat.BINARY;						_byteReference = new ByteReference(_urlLoader);						setEventListeners(true);		}				/**		 * @inheritDoc		 */				override public function destroy():void		{			cancel();						setEventListeners(false);						_byteReference.destroy();						_byteReference = null;						_urlLoader = null;		}				/**		 * @inheritDoc		 */				override public function get data():*		{			return _urlLoader.data;		}						/**		 * The data format of the URLDataLoader instance.		 * 		 * @see flash.net.URLLoaderDataFormat		 */						public function get dataFormat():String		{			return _urlLoader.dataFormat;		}				public function set dataFormat(value:String):void		{			_urlLoader.dataFormat = value;		}				private function setEventListeners(add:Boolean):void		{			var method:String = add ? "addEventListener" : "removeEventListener";						_urlLoader[method](Event.OPEN, dispatchLoadStartEvent);						_urlLoader[method](Event.COMPLETE, dispatchLoadCompleteEvent);						_urlLoader[method](ProgressEvent.PROGRESS, dispatchLoadProgressEvent);						_urlLoader[method](IOErrorEvent.IO_ERROR, dispatchIOErrorEvent);						_urlLoader[method](SecurityErrorEvent.SECURITY_ERROR, dispatchSecurityErrorEvent);		}	}}