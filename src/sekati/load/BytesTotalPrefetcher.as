/** * @version 1.0 * @author David Dahlstroem | hello@daviddahlstroem.com * Copyright (C) 2009 David Dahlstroem. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import sekati.core.ICoreInterface;	import sekati.events.LoaderEvent;	import sekati.events.WeakEventDispatcher;	import sekati.log.Logger;		import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;			/**	 * BytesTotalPrefetcher is a class used to determine a files size before loading it.	 * 	 * <p>	 * Prefetching file size involves a second load process, which is immeadiately cancelled as soon as the file	 * size is detected. Any loaded data (and reference to it) is discarded. The amount of time a prefetch takes is not determined by the connection speed, but rather	 * the latency.	 * </p>	 * 	 * @see #byteWaste	 */	public class BytesTotalPrefetcher extends WeakEventDispatcher implements ICoreInterface	{		private var _urlLoader:URLLoader;		private var _byteWaste:uint;		private var _bytesTotal:uint;		private var _prefetchComplete:Boolean = false;				/**		 * BytesTotalPrefetcher Constructor		 * 		 * @param request URLRequest defining the URL of the file to load.		 */				public function BytesTotalPrefetcher(request:URLRequest)		{			super();						_urlLoader = new URLLoader(request);						_urlLoader.addEventListener(ProgressEvent.PROGRESS, prefetch);		}		/**		 * @inheritDoc 		 */				public function destroy():void		{						if(!_urlLoader) return;						_urlLoader.removeEventListener(ProgressEvent.PROGRESS, prefetch);						try 			{				_urlLoader.close();			}			catch(e:Error) 			{				Logger.$.warn(this, "BytesTotalPrefetcher has no stream open.");			}						_urlLoader = null;		}				/**		 * Returns the prefetched file size of target file. 		 * 		 * @return File size in bytes.		 */		public function getPrefetchedBytesTotal():uint		{			return _bytesTotal;		}				/**		 * Returns the number of excess loaded bytes caused by the prefetch.		 * <p>		 * Note that the file size is fetched as soon as any load progress is detected, no matter how small.		 * This means that the amount of excess loaded bytes is in direct proportion to the connection speed		 * between client and server. A slower connection will load less excess amount of data than a fast connection.		 * </p>		 * @return Excess loaded amount of data in bytes.		 */				public function getByteWaste():uint		{			return _byteWaste;		}				/**		 * Indicates whether the prefetch is complete.		 */				public function get prefetchComplete():Boolean		{			return _prefetchComplete;		}		private function prefetch(e:ProgressEvent):void		{					_urlLoader.removeEventListener(ProgressEvent.PROGRESS, prefetch);						_byteWaste = _urlLoader.bytesLoaded;						_bytesTotal = _urlLoader.bytesTotal;						_prefetchComplete = true;						this.dispatchEvent(new LoaderEvent(LoaderEvent.BYTESTOTAL_PREFETCHED));						_urlLoader.close();						_urlLoader = null;		}	}}