/** * @version 1.0 * @author David Dahlstroem | hell@daviddahlstroem.com * Copyright (C) 2009 David Dahlstroem. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */ package sekati.load {	import sekati.core.Cancelable;	import sekati.events.LoaderEvent;	import sekati.events.WeakEventDispatcher;	import sekati.reflect.Stringifier;		import flash.events.Event;	import flash.net.URLRequest;	import flash.utils.getTimer;		/**	 * AbstractLoader class is the base class of all loader classes.	 */	public class AbstractLoader extends WeakEventDispatcher implements ILoader 	{				/**		 * Defines the priority of the loader.		 * Loaders with a low priority value will be loaded before loaders with a higher priority value		 * in a loader queue.		 * 		 * @see sekati.load.LoaderQueue		 */				public var priority:uint = 0;		/** @private */		protected var _urlRequest:URLRequest;		/** @private */		protected var _bytesTotalPrefetcher:BytesTotalPrefetcher;		/** @private */		protected var _byteReference:ByteReference;		private var _isLoaded:Boolean = false;		private var _loadStartTime:uint;		private var _loadCompleteTime:uint;		public function AbstractLoader(request:URLRequest)		{			super(this);						_urlRequest = request;		}		/**		 * @inheritDoc		 */		public function load():void		{			return;		}		/**		 * @inheritDoc		 */		public function destroy():void		{			return;		}		/**		 * @inheritDoc		 */		public function clone():Object		{			return new AbstractLoader(getURLRequest());		}		public function reset():void		{			return;		}		/**		 * @inheritDoc		 */		override public function toString():String		{			return Stringifier.stringify(this);		}		/**		 * @inheritDoc		 */		final public function get progress():Number		{			var p:Number = bytesLoaded / bytesTotal;						return (isNaN(p)) ? 0 : p;		}		/**		 * @inheritDoc		 */		final public function get bytesLoaded():uint		{				return (_byteReference.hasValidTarget) ? _byteReference.bytesLoaded : 0;		}		/**		 * @inheritDoc		 */		final public function get bytesTotal():int		{			if(!_byteReference.hasValidTarget) return 0;						if(_byteReference.bytesTotal <= 0)			{					return (bytesTotalPrefetcher && bytesTotalPrefetcher.prefetchComplete) ? bytesTotalPrefetcher.getPrefetchedBytesTotal() : 0;			}						return _byteReference.bytesTotal;		}		/**		 * @inheritDoc		 */		final public function get loaded():Boolean		{			return _isLoaded;		}		/**		 * @inheritDoc		 */		final public function get loading():Boolean		{			return (_byteReference.bytesLoaded > 0 && _byteReference.bytesLoaded < _byteReference.bytesTotal);		}		/**		 * @inheritDoc		 */		final public function get loadTime():uint		{			return _loadCompleteTime - _loadStartTime;		}		/**		 * @inheritDoc		 */		public function get data():*		{			return null;		}		/**		 * @inheritDoc		 */		final public function getURLRequest():URLRequest		{			return _urlRequest;		}		/**		 * @inheritDoc		 */		final public function get cancelable():Boolean		{			return (this is Cancelable);		}		/**		 * @inheritDoc		 */		final public function get bytesTotalPrefetcher():BytesTotalPrefetcher		{			return _bytesTotalPrefetcher;		}		/**		 * @inheritDoc		 */		final public function prefetchBytesTotal():void		{			if(_bytesTotalPrefetcher)			{				_bytesTotalPrefetcher.destroy();				_bytesTotalPrefetcher = null;			}						_bytesTotalPrefetcher = new BytesTotalPrefetcher(_urlRequest);						_bytesTotalPrefetcher.addEventListener(LoaderEvent.BYTESTOTAL_PREFETCHED, bytesTotalPrefetchComplete);		}		/** @private */		final protected function dispatchLoadStartEvent(e:Event = null):void		{			_isLoaded = false;						_loadStartTime = getTimer();						dispatchEvent(new LoaderEvent(LoaderEvent.START));		}		/** @private */		final protected function dispatchLoadProgressEvent(e:Event = null):void		{				_isLoaded = false;						dispatchEvent(new LoaderEvent(LoaderEvent.PROGRESS));		}		/** @private */		final protected function dispatchLoadCompleteEvent(e:Event = null):void		{			_isLoaded = true;						_loadCompleteTime = getTimer(); 						dispatchEvent(new LoaderEvent(LoaderEvent.COMPLETE));		}		/** @private */		final protected function dispatchIOErrorEvent(e:Event = null):void		{			_isLoaded = false;						dispatchEvent(new LoaderEvent(LoaderEvent.IO_ERROR));		}		/** @private */		final protected function dispatchSecurityErrorEvent(e:Event = null):void		{			_isLoaded = false;						dispatchEvent(new LoaderEvent(LoaderEvent.SECURITY_ERROR));		}		private function bytesTotalPrefetchComplete(e:LoaderEvent):void		{			this.dispatchEvent(new LoaderEvent(LoaderEvent.BYTESTOTAL_PREFETCHED));		}	}}