/* * sekati.air.display.DragAndDropTextfield * @version 1.0.0 * @author Steven J Baughman | Tender * Copyright (C) 2009  Steven J Baughman, Tender. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.air.display {	import flash.desktop.NativeDragOptions;			import sekati.display.CoreBitmapData;			import flash.desktop.NativeDragManager;		import flash.desktop.ClipboardFormats;		import flash.desktop.Clipboard;		import flash.events.MouseEvent;			import sekati.display.InteractiveSprite;	import sekati.utils.TextUtil;	import flash.text.TextField;			/**	 * DragAndDropTextfield	 */	public class DragAndDropTextfield extends InteractiveSprite {		public var tf : TextField;		private var copyText : String;		private var clipboard : Clipboard;		private var textPreview : CoreBitmapData;		private var options : NativeDragOptions;		public function DragAndDropTextfield(copyText : String) {			super( );			this.copyText = copyText;			setupTextfield( );			setupCopyPasteOptions();			text = copyText;		}				/*		 * Setup basic drag-and-drop restrictions		 */		protected function setupCopyPasteOptions() : void {			// Only allow our image to be copied.			// Links and move won't do us much good because we're creating the file dynamically.			options = new NativeDragOptions( );			options.allowCopy = true;			options.allowLink = false;			options.allowMove = false;		}				/*		 * Stub class for attaching textfield. 		 * Conversely, you could use the embed tag to link this class		 * to an image prepped in the Flash IDE		 */		protected function setupTextfield() : void {			tf = new TextField( );			addChild( tf );			}				/*		 * Set clipboard, and start drag-and-drop		 */		override protected function press(e : MouseEvent = null) : void {			super.press( e );			// create new clipboard object			clipboard = new Clipboard( );						clipboard.setData( ClipboardFormats.TEXT_FORMAT, tf.text ); // create text dump version						// start dragging			NativeDragManager.doDrag( this, clipboard, textPreview, null, options );		}				/*		 * Shortcut to set text in the textfield.		 * Also copies a preview of the textfield into a CoreBitMapData object,		 * so that we have a preview for drag-and-drop		 */		public function set text(value : String) : void {			TextUtil.setFormattedText( tf, value );						// copy text into a bitmap data object so that we can have a preview when dragging			textPreview = new CoreBitmapData( this, 0, 0, width, height, 1, true, 0x000000 );		}				/*		 * shortcut for grabbing the string from the Textfield		 */		public function get text(): String {			return tf.text;		}	}}